import ajax from 'ic-ajax';

var AllRefsets;

export default Ember.Object.extend({
	
	getHeaders : function(user)
	{
		var headers =
		{
			'X-REFSET-PRE-AUTH-USERNAME'	: user.username,
			'X-REFSET-PRE-AUTH-TOKEN'		: user.token
		};

		return headers;
	}, 
	
	findAll : function (user,reinit)
	{
		Ember.Logger.log("adapters.refsets:findAll (user,reinit)",user,reinit);
		
		var forceReinit = typeof reinit === "undefined" ? 0 : reinit;

		if (forceReinit || typeof AllRefsets === "undefined")
		{
			var result = ajax(RefsetENV.APP.refsetApiBaseUrl, {headers:this.getHeaders(user)}).then(function(result)
			{
				if (result.meta.noOfRecords !== 0)
				{					
					return result.content.refsets;
				}
				else
				{
					Ember.Logger.log("Didn't get any data from server...",result.meta.message);
					return {dataError : true};
				}
			},
			function (error)
			{
				Ember.Logger.log("refsets findAll error",error);
				return [];	
			});

			AllRefsets =  result;
		}

		return AllRefsets;
	},
	
	find : function (user,id)
	{
		Ember.Logger.log("adapters.refsets:find (user,id)",user,id);
		
		var _this = this;
		
		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + '/' + id, {headers:this.getHeaders(user),timeout: 5000}).then(function(response)
		{	
			return response;
		},
		function (response) 
		{
			Ember.Logger.log("adapters.refsets:find (error)",response);

			return _this.returnErrorResponse(response);
		});	
		
		return result;
	},
	
	returnErrorResponse : function(response)
	{
		if (typeof response.jqXHR.responseJSON !== "undefined")
		{
			// We have an error generated by the API
						
// Temp code until Parashant finishes his bit...
if (response.jqXHR.status === 401)
{
	response.jqXHR.responseJSON.meta.errorInfo = {message:'UNAUTHORISED',code:401};
}

if (response.jqXHR.status === 403)
{
	response.jqXHR.responseJSON.meta.errorInfo = {message:'UNAUTHORISED',code:401};
}

if (response.jqXHR.status === 404)
{
	response.jqXHR.responseJSON.meta.errorInfo = {message:'NOT_FOUND',code:404};
}

			return {meta:response.jqXHR.responseJSON.meta};
		}
		else
		{
			// We've failed to speak to the API...
			return {meta:{api_status:500,errorInfo:{message:response.jqXHR.statusText,code:response.jqXHR.status}}};
		}
	},
	
	create : function (user,refset)
	{
		Ember.Logger.log("adapters.refsets:create",user,refset);
		
		var jsonFormatRefset = JSON.stringify(refset);

		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + '/new', {headers:this.getHeaders(user), type:'post', data: jsonFormatRefset, processData: false, contentType: 'application/json'}).then(function(result)
		{
			return result;	
		},
		function (error)
		{
			Ember.Logger.log("create refset error",error);
			return {authError : true};

			// Needs more work here.  A failure might not just be an authenticate error...
		});	
		
		return result;
	},
	
	update : function (user,refset)
	{
		Ember.Logger.log("adapters.refsets:update",user,refset);
		
		var jsonFormatRefset = JSON.stringify(refset);

		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + '/update', {headers:this.getHeaders(user), type:'post', data: jsonFormatRefset, processData: false, contentType: 'application/json'}).then(function(result)
		{
			return result;	
		},
		function (error)
		{
			Ember.Logger.log("update refset error",error);
			return {authError : true};
			
			// Needs more work here.  A failure might not just be an authenticate error...
		});	
		
		return result;
	},
	
	addMember : function (user,refsetId,referenceComponentId)
	{
		Ember.Logger.log("adapters.refsets:addMember (user,refsetId,referenceComponentId)",user,refsetId,referenceComponentId);

		var member = {referenceComponentId : referenceComponentId, active:true};
			
		var jsonFormatMemberData = JSON.stringify(member);
		
		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + '/' + refsetId + '/add/member', {headers:this.getHeaders(user), method:"post", data: jsonFormatMemberData, processData: false, contentType: 'application/json'}).then(function(result)
		{			
			Ember.Logger.log("add member result",result);
			return result;
		},
		function (error)
		{
			Ember.Logger.log("adapters.refsets:addMember error",error);
			return [];
		});

		return result;	
	},
	
	getRefsetExport : function(user,id)
	{
		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + '/' + id + '/export', {headers:this.getHeaders(user)}).then(function(result){
			return result;	
		},
		function (error)
		{
			Ember.Logger.log("refsets getRefsetExport error",error);
			return {authError : true};
		});	
		
		return result;
	},
	
	deleteRefset : function(user,id)
	{
		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + '/delete/' + id , {headers:this.getHeaders(user), method:"delete", processData: false, contentType: 'application/json'}).then(function(result){
			Ember.Logger.log("refsets deleteRefset result",result);
			return true;	
		},
		function (error)
		{
			Ember.Logger.log("refsets deleteRefset error",error);
			return {authError : true};
		});	
		
		return result;

	},
	
});

