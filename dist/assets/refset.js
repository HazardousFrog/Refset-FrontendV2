eval("//# sourceURL=assets/ember-cli/loader.js");

;eval("define(\"refset/adapters/login\", \n  [\"ic-ajax\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Object.extend({\n    	\n    	authenticate: function(username, password) \n    	{ \n    	    Ember.Logger.log(\'adapters.login:authenticate\');\n\n    	    var data = {};\n    		data.username  = username;\n    		data.password  = password;\n    		data.queryName = RefsetENV.APP.authenticationActionSoapName;\n\n    		var result = ajax(RefsetENV.APP.authenticationUrl, {type:\'post\', data: data}).then(function(success)\n    		{\n    			success.authenticated = true;\n    			\n    			return success;\n    		},\n    		function (error)\n    		{\n    			var result = {};\n    			\n    			result.authenticated = false;\n    			result.error = (error.errorThrown === \"Unauthorized\") ? \'Username and/or password not recognised\' : \'Error accessing the authentication server\';\n    			\n    			return result; \n    		});	\n    		\n    		return result;\n    	},\n     \n    	isPermittedToUseRefset: function(userId)\n    	{\n    		Ember.Logger.log(\'adapters.login:isPermittedToUseRefset\');\n\n    		var result = ajax(RefsetENV.APP.appsUrl.replace(\'__USER_ID__\', userId), {type:\'get\'}).then(function(permittedAppsResult)\n    		{\n    			return $.inArray(RefsetENV.APP.thisApplicationName,permittedAppsResult.apps) === -1 ? 0 : 1;\n    		},\n    		function (error)\n    		{\n    			Ember.Logger.log(\"adapters.login:isPermittedToUseRefset (error)\",error);\n    			return -1;\n    		});	\n    		\n    		return result;\n    	},\n    	\n    });\n  });//# sourceURL=refset/adapters/login.js");

;eval("define(\"refset/adapters/refsets\", \n  [\"ic-ajax\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Object.extend({\n    	\n    	getHeaders : function(user)\n    	{\n    		var headers =\n    		{\n    			\'X-REFSET-PRE-AUTH-USERNAME\'	: user.name,\n    			\'X-REFSET-PRE-AUTH-TOKEN\'		: user.token\n    		};\n\n    		return headers;\n    	},\n\n    	\n    	returnErrorResponse : function(response)\n    	{\n    		if (typeof response.jqXHR.responseJSON !== \"undefined\")\n    		{\n    			// We have an error generated by the API\n    			return {meta:response.jqXHR.responseJSON.meta};\n    		}\n    		else\n    		{\n    			// We\'ve failed to speak to the API...\n    			return {meta:{errorInfo:{message:response.jqXHR.statusText,code:response.jqXHR.status.toString()}}};\n    		}\n    	},\n    	\n    	findAll : function (user)\n    	{\n    		Ember.Logger.log(\"adapters.refsets:findAll (user)\",user);\n    		\n    		var _this = this;\n    		\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl, {headers:this.getHeaders(user)}).then(function(response)\n    		{\n    			return response;\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});\n    		\n    		return result;\n    	},\n    	\n    	find : function (user,id)\n    	{\n    		Ember.Logger.log(\"adapters.refsets:find (user,id)\",user,id);\n    		\n    		var _this = this;\n    		\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/\' + id, {headers:this.getHeaders(user),timeout: 5000}).then(function(response)\n    		{	\n    			return response;\n    		},\n    		function (response) \n    		{\n    			return _this.returnErrorResponse(response);\n    		});	\n    		\n    		return result;\n    	},\n\n    	\n    	create : function (user,refset)\n    	{\n    		Ember.Logger.log(\"adapters.refsets:create\",user,refset);\n    		\n    		var _this = this;\n\n    		var jsonFormatRefset = JSON.stringify(refset);\n\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/new\', {headers:this.getHeaders(user), type:\'post\', data: jsonFormatRefset, processData: false, contentType: \'application/json\'}).then(function(response)\n    		{\n    			return response;	\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});	\n    		\n    		return result;\n    	},\n    	\n    	update : function (user,refset)\n    	{\n    		Ember.Logger.log(\"adapters.refsets:update\",user,refset);\n    		\n    		var _this = this;\n\n    		var jsonFormatRefset = JSON.stringify(refset);\n\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/update\', {headers:this.getHeaders(user), type:\'post\', data: jsonFormatRefset, processData: false, contentType: \'application/json\'}).then(function(response)\n    		{\n    			return response;	\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});	\n    		\n    		return result;\n    	},\n    	\n    	addMember : function (user,refsetId,referencedComponentId)\n    	{\n    		Ember.Logger.log(\"adapters.refsets:addMember (user,refsetId,referencedComponentId)\",user,refsetId,referencedComponentId);\n\n    		var _this = this;\n\n    		var member = {referencedComponentId : referencedComponentId, active:true};\n    //		delete member[\"meta\"];\n    			\n    		var jsonFormatMemberData = JSON.stringify(member);\n    		\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/\' + refsetId + \'/add/member\', {headers:this.getHeaders(user), method:\"post\", data: jsonFormatMemberData, processData: false, contentType: \'application/json\'}).then(function(response)\n    		{			\n    			return response;\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});\n\n    		return result;	\n    	},\n    	\n    	addMembers : function (user,refsetId,members)\n    	{\n    		Ember.Logger.log(\"adapters.refsets:addMembers (user,refsetId,members)\",user,refsetId,members);\n\n    		var _this = this;\n    		\n    		var importMembers = members.map(function(member)\n    		{\n    			var myMember = $.extend(true, {}, member);\n    			delete myMember[\"meta\"];\n    			return myMember;\n    		});\n    			\n    		var jsonFormatMemberData = JSON.stringify(importMembers);\n\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/\' + refsetId + \'/add/members\', {headers:_this.getHeaders(user), method:\"post\", data: jsonFormatMemberData, processData: false, contentType: \'application/json\'}).then(function(response)\n    		{			\n    			return response;\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});\n    		\n    		return result;	\n    	},\n    	\n    	deleteMembers : function(user,refsetid,members)\n    	{\n    		var _this = this;\n    		\n    		var data = members.map(function(member)\n    		{\n    			return member.referencedComponentId;\n    		});\n    		\n    		var jsonFormatMemberData = JSON.stringify(data);\n\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/delete/\' + refsetid + \'/members\', {headers:this.getHeaders(user), method:\"delete\", data: jsonFormatMemberData, processData: false, contentType: \'application/json\'}).then(function(response){\n    			return response;	\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});	\n    		\n    		return result;\n    	},\n    	\n    	getRefsetExport : function(user,id)\n    	{\n    		var _this = this;\n\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/\' + id + \'/export\', {headers:this.getHeaders(user)}).then(function(response){\n    			return response;	\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});	\n    		\n    		return result;\n    	},\n    	\n    	deleteRefset : function(user,id)\n    	{\n    		var _this = this;\n\n    		var result = ajax(RefsetENV.APP.refsetApiBaseUrl + \'/delete/\' + id , {headers:this.getHeaders(user), method:\"delete\", processData: false, contentType: \'application/json\'}).then(function(response){\n    			return response;	\n    		},\n    		function (response)\n    		{\n    			return _this.returnErrorResponse(response);\n    		});	\n    		\n    		return result;\n    	},\n    	\n    });\n  });//# sourceURL=refset/adapters/refsets.js");

;eval("define(\"refset/adapters/simple-members\", \n  [\"ic-ajax\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Object.extend({\n    	\n    	getHeaders : function(user)\n    	{\n    		var headers =\n    		{\n    			\'X-REFSET-PRE-AUTH-USERNAME\'	: user.name,\n    			\'X-REFSET-PRE-AUTH-TOKEN\'		: user.token\n    		};\n\n    		return headers;\n    	}, \n    	\n    	returnErrorResponse : function(response)\n    	{\n    		if (typeof response.jqXHR.responseJSON !== \"undefined\")\n    		{\n    			// We have an error generated by the API\n    			return {meta:response.jqXHR.responseJSON.meta};\n    		}\n    		else\n    		{\n    			// We\'ve failed to speak to the API...\n    			return {meta:{errorInfo:{message:response.jqXHR.statusText,code:response.jqXHR.status.toString()}}};\n    		}\n    	},\n    	\n    	findList : function (user,idArray)\n    	{\n    		Ember.Logger.log(\"adapters.simple-members:findList\");\n    		\n    		var jsonFormatIdArray = JSON.stringify(idArray);\n    		var _this = this;\n    	\n    		var result = ajax(RefsetENV.APP.conceptsApiBaseUrl, {headers:this.getHeaders(user), method:\"post\", data: jsonFormatIdArray, processData: false, contentType: \'application/json\'}).then(function(response)\n    		{	\n    			return response;\n    		},\n    		function (response)\n    		{\n    			Ember.Logger.log(\"adapters.simple-members:findList error\",response);\n    			return _this.returnErrorResponse(response);\n    		});\n\n    		return result;\n\n    	},\n    	\n    	find : function (user,id)\n    	{\n    		Ember.Logger.log(\"adapters.simple-members:find\",user,id);\n    		var _this = this;\n    		\n    		var result = ajax(RefsetENV.APP.conceptsApiBaseUrl + \'/\' + id, {headers:this.getHeaders(user), method:\"get\"}).then(function(response)\n    		{	\n    			return response;\n    		},\n    		function (response)\n    		{\n    			Ember.Logger.log(\"adapters.simple-members:find error\",response);\n    			return _this.returnErrorResponse(response);\n    		});\n\n    		return result;\n\n    	},\n\n    });\n  });//# sourceURL=refset/adapters/simple-members.js");

;eval("define(\"refset/adapters/type-lookups\", \n  [\"ic-ajax\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Object.extend({\n    	\n    	getHeaders : function(user)\n    	{\n    		var headers =\n    		{\n    			\'X-REFSET-PRE-AUTH-USERNAME\'	: user.name,\n    			\'X-REFSET-PRE-AUTH-TOKEN\'		: user.token\n    		};\n\n    		return headers;\n    	}, \n    	\n    	returnErrorResponse : function(response)\n    	{\n    		if (typeof response.jqXHR.responseJSON !== \"undefined\")\n    		{\n    			// We have an error generated by the API\n    			return {meta:response.jqXHR.responseJSON.meta};\n    		}\n    		else\n    		{\n    			// We\'ve failed to speak to the API...\n    			return {meta:{errorInfo:{message:response.jqXHR.statusText,code:response.jqXHR.status.toString()}}};\n    		}\n    	},\n    	\n    	getComponentTypes : function (user)\n    	{\n    		Ember.Logger.log(\"adapters.type-lookups:getComponentTypes\");\n    		var _this = this;\n    		\n    		var result = ajax(RefsetENV.APP.snomedTypesApiBaseUrl + \'componentTypes\', {headers:this.getHeaders(user), method:\"get\"}).then(function(response)\n    		{	\n    			return response;\n    		},\n    		function (response)\n    		{\n    			Ember.Logger.log(\"adapters.type-lookups:getComponentTypes error\",response);\n    			return _this.returnErrorResponse(response);\n    		});\n\n    		return result;\n    	},\n    	\n    	getModules : function (user)\n    	{\n    		Ember.Logger.log(\"adapters.type-lookups:getModules\");\n    		var _this = this;\n    		\n    		var result = ajax(RefsetENV.APP.snomedTypesApiBaseUrl + \'modules\', {headers:this.getHeaders(user), method:\"get\"}).then(function(response)\n    		{	\n    			return response;\n    		},\n    		function (response)\n    		{\n    			Ember.Logger.log(\"adapters.type-lookups:getModules error\",response);\n    			return _this.returnErrorResponse(response);\n    		});\n\n    		return result;\n    	},\n\n    	getRefsetTypes : function (user)\n    	{\n    		Ember.Logger.log(\"adapters.type-lookups:getRefsetTypes\");\n    		var _this = this;\n    		\n    		var result = ajax(RefsetENV.APP.snomedTypesApiBaseUrl + \'refsetTypes\', {headers:this.getHeaders(user), method:\"get\"}).then(function(response)\n    		{	\n    			return response;\n    		},\n    		function (response)\n    		{\n    			Ember.Logger.log(\"adapters.type-lookups:getRefsetTypes error\",response);\n    			return _this.returnErrorResponse(response);\n    		});\n\n    		return result;\n    	},\n    });\n  });//# sourceURL=refset/adapters/type-lookups.js");

;eval("define(\"refset/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: \'refset\', // TODO: loaded via config\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, \'refset\');\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=refset/app.js");

;eval("define(\"refset/components/snomed-data-dropdown\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Select.extend({\n    	\n    	content : Ember.computed(function()\n    	{\n    		var dataController 	= Refset.__container__.lookup(\"controller:data\");\n    		return dataController.get(this.dataType);\n    	}),\n\n    	optionLabelPath : \"content.label\",\n    	optionValuePath : \"content.id\",		\n    });\n  });//# sourceURL=refset/components/snomed-data-dropdown.js");

;eval("define(\"refset/config/environment\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"environment\":\"development\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"thisApplicationName\":\"Refset\",\"RegistrationEmail\":\"register@ihtsdo.org\",\"authenticationActionSoapName\":\"getUserByNameAuth\",\"authenticationUrl\":\"https://usermanagement.ihtsdotools.org/security-web/query/\",\"appsUrl\":\"https://usermanagement.ihtsdotools.org/security-web/query/users/__USER_ID__/apps\",\"permissionsUrl\":\"https://usermanagement.ihtsdotools.org/security-web/query/users/__USER_ID__/apps/Refset\",\"passwordResetURL\":\"https://usermanagement.ihtsdotools.org/security-web/requestPwChange.jsp\",\"refsetApiBaseUrl\":\"http://content.ihtsdotools.org:8080/refset/v1.0/refsets\",\"conceptsApiBaseUrl\":\"http://content.ihtsdotools.org:8080/refset/v1.0/snomed/concepts\",\"snomedTypesApiBaseUrl\":\"http://content.ihtsdotools.org:8080/refset/v1.0/snomed/\",\"numItemsPerPage\":10,\"numItemsPerPageDashboard\":5,\"supportedSnomedTypes\":{\"refsetTypes\":[\"446609009\",\"900000000000496009\"],\"componentTypes\":[\"900000000000461009\",\"900000000000462002\"]},\"defaultSnomedTypes\":{\"refsetType\":\"446609009\",\"componentType\":\"900000000000461009\",\"moduleType\":\"900000000000207008\"},\"loginExpiry\":20,\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true}};\n  });//# sourceURL=refset/config/environment.js");

;eval("define(\"refset/controllers/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    Ember.TextField.reopen(\n    {\n    	  attributeBindings: [\'data-provide\',\'data-date-format\',\'data-date-clear-btn\',\'data-date-autoclose\']\n    });\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n\n    	needs : [\"login\",\"data\"],\n    	\n    	user : Ember.computed.alias(\"controllers.login.user\"),\n    	\n    	logoutTimerDisplay 		: Ember.computed.alias(\"controllers.login.logoutTimerDisplay\"),\n    	showLogoutTimer 		: Ember.computed.alias(\"controllers.login.showLogoutTimer\"),\n    	autoLoggedOut			: Ember.computed.alias(\"controllers.login.autoLoggedOut\"),\n    	logoutProgressDisplay	: Ember.computed.alias(\"controllers.login.logoutProgressDisplay\"),\n\n    	init : function()\n    	{\n    		window.addEventListener(\"dragover\",function(e)\n    		{\n    			e = e || event;\n    			e.preventDefault();\n    		},false);\n    		window.addEventListener(\"drop\",function(e)\n    		{\n    			e = e || event;\n    			e.preventDefault();\n    		},false);\n    	},\n    	\n    	currentPathDidChange : function()\n    	{\n    		var newPath = this.get(\'currentPath\');\n    		Ember.Logger.log(\"controllers.application:currentPathDidChange (path)\",newPath);\n    		\n    		 window.document.title = newPath;\n    		 \n    		var controller = this.get(\'controllers.data\');\n    		controller.applicationPathChanged();\n    	}.observes(\'currentPath\'),\n\n    	actions :\n    	{\n    		showLoginForm: function() \n    		{\n    			var controller = this.get(\'controllers.login\');\n    			controller.showLoginForm();\n    		},\n\n    		showRegistrationForm: function() \n    		{\n    			var controller = this.get(\'controllers.login\');\n    			controller.showRegistrationForm();\n    		},\n\n    		logout : function()\n    		{\n    			var controller = this.get(\'controllers.login\');\n    			controller.logout();\n    		},		\n    	},\n    });\n  });//# sourceURL=refset/controllers/application.js");

;eval("define(\"refset/controllers/dashboard\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n\n    	needs : [\"data\",\"news\"],\n\n    	news 		: Ember.computed.alias(\"controllers.news.latestNews\"),\n    	refsets 	: Ember.computed.alias(\"controllers.data.publishedRefsets\"),\n\n    	initModel : function()\n    	{\n    		Ember.Logger.log(\"controllers.dashboard:initModel\");\n    		\n    		var _this 			= this;\n    		var dataController 	= this.get(\'controllers.data\');\n    		\n    		// Run next so that we do not prevent the UI being displayed if the data is delayed...\n    		return Ember.run.next(function(){dataController.getAllRefsets(_this,\'getAllRefsetsComplete\');});\n    	},\n    	\n    	actions :\n    	{\n    		getAllRefsetsComplete : function(response)\n    		{\n    			Ember.Logger.log(\"controllers.dashboard:actions:getAllRefsetsComplete (response)\",response);\n\n    		},	\n    	}\n    });\n  });//# sourceURL=refset/controllers/dashboard.js");

;eval("define(\"refset/controllers/data\", \n  [\"refset/adapters/refsets\",\"refset/adapters/simple-members\",\"refset/adapters/type-lookups\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var RefsetsAdapter = __dependency1__[\"default\"];\n    var refsetsAdapter = RefsetsAdapter.create();\n\n    var MembersAdapter = __dependency2__[\"default\"];\n    var membersAdapter = MembersAdapter.create();\n\n    var SnomedTypesAdapter = __dependency3__[\"default\"];\n    var snomedTypesAdapter = SnomedTypesAdapter.create();\n\n    // Computed alias don\'t work in this controller - no container?\n\n    var autoServerRetryInterval		= 5;	// Seconds before retrying\n    var autoServerRetryMultiplier 	= 1.5; 	// Multiply autoServerRetryInterval by this between each retry (so wait period gets longer)\n    var numAutoServerRetries		= 5; 	// Number of times to auto-retry before prompting user\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n    	\n    	needs 					: [\"login\"],\n    	\n    	refsets 				: [],\n    	unpublishedRefsets		: [],\n    	publishedRefsets		: [],\n    	refset 					: {},\n    	currentRefset			: null,\n    	currentAllRefsets		: null,\n    	showWaitCounter			: 0,\n    	hideWaitCounter			: 0,\n    	callsInProgressCounter	: 0,\n    	retryQueue				: [],\n    	moduleTypes				: {},\n    	refsetTypes				: {},\n    	componentTypes			: {},\n    	refsetTypesArray		: [],\n    	componentTypesArray		: [],\n    	moduleTypesArray		: [],\n    	languagesArray			: [{id:\'en_US\',label:\'International English\'}],\n    	initialised				: false,\n\n    	init : function()\n    	{\n    		Ember.Logger.log(\"controllers.data:init\");\n    		this.processRetryQueue();\n    	},\n\n    	initialiseAppData : function()\n    	{		\n    		Ember.Logger.log(\"controllers.data:initialiseAppData\");\n\n    		var p1 = this.getSnomedRefsetTypes().then(function(p){return typeof p.meta.errorInfo === \"undefined\";});\n    		var p2 = this.getSnomedModulesTypes().then(function(p){return typeof p.meta.errorInfo === \"undefined\";});\n    		var p3 = this.getSnomedComponentTypes().then(function(p){return typeof p.meta.errorInfo === \"undefined\";});\n    		\n    		return Ember.RSVP.all([p1,p2,p3]).then(function(){\n    			return {refsets:p1._result,modules:p2._result,components:p3._result};\n    		}).then(function(init)\n    		{\n    			if (!init.refsets)\n    			{\n    				Bootstrap.GNM.push(\'Communication Error\',\'API not responding. Application Failed to initialize Refset Types. retryCounter.\', \'warning\');	\n    			}\n\n    			if (!init.modules)\n    			{\n    				Bootstrap.GNM.push(\'Communication Error\',\'API not responding. Application Failed to initialize Modules Types. retryCounter.\', \'warning\');	\n    			}\n\n    			if (!init.components)\n    			{\n    				Bootstrap.GNM.push(\'Communication Error\',\'API not responding. Application Failed to initialize Refset Component Types. retryCounter.\', \'warning\');	\n    			}\n    			\n    			return (init.refsets && init.refsets && init.refsets);\n    		});\n    	},\n    	\n    	processRetryQueue : function()\n    	{\n    		if (this.retryQueue.length)\n    		{\n    			// Copy and empty the queue so we can work on a queue that does not change\n    			var queue = this.retryQueue;\n    			this.set(\"retryQueue\",[]);\n    			\n    			for (var q=queue.length -1;q>=0;q--)\n    			{\n    				var queueItem 	= queue[q];\n    				var timeNow 	= new Date().getTime();\n    			\n    				if (queueItem.runTime <= timeNow)\n    				{\n    					queue.splice(q,1);\n    					\n    					this[queueItem.callbackFn].apply(this,queueItem.params);\n    					Bootstrap.GNM.push(\'retryCounter communication\',\'retryCounter to request \' + queueItem.resourceType + \' from the server.\', \'info\');\n    				}\n    			}\n    			\n    			// Add anything left in our queue to the main one for future processing\n    			queue = queue.concat(this.retryQueue);\n    			this.set(\"retryQueue\",queue);\n    		}	\n    		\n    		var _this = this;\n    		\n    		Ember.run.later(function(){_this.processRetryQueue();},250);\n    	},\n    	\n    	applicationPathChanged : function()\n    	{\n    		Ember.Logger.log(\"controllers.data:applicationPathChanged (retryQueue,initialised)\",this.retryQueue,this.initialised);\n\n    		if (!this.initalised)\n    		{\n    			if (this.refsetTypesArray.length && this.componentTypesArray.length && this.moduleTypesArray.length)\n    			{\n    				this.set(\"initialised\",true);\n    			}\n    		}\n    		\n    		if (this.initialised)\n    		{\n    			this.set(\"showWaitCounter\",this.callsInProgressCounter);\n    			this.set(\"hideWaitCounter\",0);\n\n    			var queue = this.retryQueue;\n    			\n    			for (var q=0;q<queue.length;q++)\n    			{\n    				var queueItem 	= queue[q];\n    				Bootstrap.GNM.push(\'Aborting communication\',\'Aborting queued request for \' + queueItem.resourceType + \' from the server.\', \'info\');			\n    			}\n    			\n    			// Need to alert aborts before we do this...\n    			this.set(\"retryQueue\",[]);\n    			\n    			$(\'.waitAnim\').hide();\n    		}\n    	},\n    	\n    	authenticationStatusChanged : function()\n    	{\n    		// Abandon any previous queued messages since we\'ll retry now\n    		this.applicationPathChanged();\n    		\n    		if (this.currentAllRefsets !== null)\n    		{\n    			this.getAllRefsets(this.currentAllRefsets.callingController,this.currentAllRefsets.completeAction);\n    		}\n    		\n    		// If we are holding a refset then refresh it\n    		if (this.currentRefset !== null)\n    		{\n    			this.getRefset(this.currentRefset.id,this.currentRefset.callingController,this.currentRefset.completeAction);\n    		}\n    	},\n    	\n    	showWaitAnim : function()\n    	{\n    		this.set(\"showWaitCounter\",this.showWaitCounter+1);\n    		\n    		$(\'.waitAnim\').show();\n    	},\n    	\n    	hideWaitAnim : function()\n    	{\n    		this.set(\"hideWaitCounter\",this.hideWaitCounter+1);\n    		\n    		if (this.showWaitCounter === this.hideWaitCounter)\n    		{\n    			$(\'.waitAnim\').hide();\n    		}\n    	},\n    	\n    	getRetryWaitPeriod : function(counter)\n    	{\n    		var multiplier = 1;\n    		\n    		for (var c=0;c<counter;c++)\n    		{\n    			multiplier = multiplier * autoServerRetryMultiplier;\n    		}\n    		\n    		return Math.ceil(autoServerRetryInterval * multiplier);\n    	},\n    	\n    	handleRequestFailure : function(response,resourceType,callbackFn,callbackParams,callingController,completeAction,retryCounter)\n    	{\n    		var _this = this;\n    		\n    		switch(response.meta.errorInfo.code)\n    		{\n    			case \"401\":\n    			{\n    				var loginController = this.get(\'controllers.login\');\n    				var user = loginController.user;\n    								\n    				// Question here is, has the user\'s token been updated?\n\n    				if (user.token === null)\n    				{\n    					// User is not logged in, so prompt to login\n    					Bootstrap.GNM.push(\'Authentication Required\',\'The \' + resourceType + \' you have requested is not publically available. You must log in to view it.\', \'warning\');\n    					loginController.showLoginForm();\n\n        				if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n        				{\n            				callingController.send(completeAction,response);\n        				}				\n    				}\n    				else\n    				{\n    					// User is logged in, but it not permitted to access the requested resource\n    					Bootstrap.GNM.push(\'Not Authorised\',\'You do not have permission to access the \' + resourceType + \' you have requested.\', \'warning\');\n    					\n    			        BootstrapDialog.show({\n    			            title: \'<img src=\"assets/img/login.white.png\"> Not Authorised\',\n    			            closable: false,\n    			            message: \'You do not have permission to access the \' + resourceType + \' you have requested.\',\n    			            buttons: [{\n    			                label: \'OK\',\n    			                action: function(dialog) {\n    			                	// Go to parent route....\n    			                    dialog.close();\n    			                }\n    			            }]\n    			        });\n    				}\n    				\n    				_this.hideWaitAnim();\n    				\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n    				{\n        				callingController.send(completeAction,{error:1,unauthorised:1});\n    				}\n    				\n    				return;\n    			}\n\n    			case \"404\":\n    			{\n    				// Not found\n    				Bootstrap.GNM.push(\'Not found\',\'We cannot locate the \' + resourceType + \' you have requested.\', \'warning\');\n\n    				_this.hideWaitAnim();\n    				\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n    				{\n        				callingController.send(completeAction,{error:1,notFound:1});\n    				}\n\n    				return;\n    			}\n    			\n    			case \"400\":\n    			{\n    				// Bad Request\n    				Bootstrap.GNM.push(\'Bad Request\',\'Server rejected our request\', \'warning\');\n\n    				_this.hideWaitAnim();\n    				\n    				BootstrapDialog.show({\n    		            title: \'<img src=\"assets/img/login.white.png\"> Bad Request : \' + resourceType,\n    		            closable: false,\n    		            message: \'<p>There has been a problem communicating with the server.</p><p>\' + response.meta.errorInfo.message + \'</p>\',\n    		            buttons: \n    		            [\n    		             	{\n    		             		label: \'OK\',\n    		             		action: function(dialog)\n    		             		{\n    		             			_this.hideWaitAnim();\n    		        				\n    		             			Ember.Logger.log(\"closing window\",callingController,completeAction);\n    		             			\n    		             			\n    		        				if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n    		        				{\n    		            				callingController.send(completeAction,{error:1,requestError:1});\n    		        				}\n    		        				\n    		             			dialog.close();\n    		             		}\n    		             	}\n    		             ]\n    		        });\n\n    				return;\n    			}\n    			\n    			default :\n    			{\n    				// Other error, worth retryCounter...\n    			\n    				if (retryCounter < numAutoServerRetries)\n    				{\n    					var waitPeriod = _this.getRetryWaitPeriod(retryCounter);\n    					\n    					Bootstrap.GNM.push(\'Communication Error\',\'Error communicating with the server \' + (++retryCounter) + \' times. Will retry \' + resourceType + \' in \' + waitPeriod + \' seconds.\', \'warning\');\n    									\n\n    					var params = callbackParams;\n    					if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n    					{\n    						params.push(callingController);\n    						params.push(completeAction);\n    					}\n    					params.push(retryCounter);\n\n    					var runTime = new Date().getTime() + (waitPeriod * 1000);\n    					\n    					var queue = _this.retryQueue;\n    					queue.push({resourceType:resourceType,callbackFn:callbackFn,params:params,runTime:runTime});\n    					\n    					_this.set(\"retryQueue\",queue);\n    					\n    					return;\n    				}\n    				else\n    				{\n    					// Too many errors. Time to prompt the user\n    					if (!this.loginDialogOpen || !this.initialised)\n    					{\n    						Bootstrap.GNM.push(\'Communication Failure\',\'Error communicating with the server. \' + (numAutoServerRetries +1) + \' sucessive attempts to \' + resourceType + \' have failed.\', \'danger\');\n\n    						BootstrapDialog.show({\n    				            title: \'<img src=\"assets/img/login.white.png\"> Communication Failure : \' + resourceType,\n    				            closable: false,\n    				            message: \'<p>There has been a problem communicating with the server.</p><p>We have tried \' + (numAutoServerRetries +1) + \' times already to \' + resourceType + \'.</p><p>Would you like to keep trying or give up?</p>\',\n    				            buttons: \n    				            [\n    				             	{\n    				             		label: \'Give up\',\n    				             		action: function(dialog)\n    				             		{\n    				             			_this.hideWaitAnim();\n    				        				\n    				        				if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n    				        				{\n    				            				callingController.send(completeAction,{error:1,commsError:1});\n    				        				}\n    				        				\n    				             			dialog.close();\n    				             		}\n    				             	},\n    				             	{\n    				             		label: \'Continue Trying\',\n    				             		cssClass: \'btn-primary\',\n    				             		action: function(dialog)\n    				             		{\n    				    					var params = callbackParams;\n    				    					if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n    				    					{\n    				    						params.push(callingController);\n    				    						params.push(completeAction);\n    				    					}\n    				    					params.push(retryCounter);\n    				    					\n    				    					_this[callbackFn].apply(_this,params);\n    				             			dialog.close();\n    				             		}\n    				             	}\n    				             ]\n    				        });\n    					}\n    					else\n    					{\n    						Bootstrap.GNM.push(\'Communication Failure\',\'Error communicating with the server. \' + (numAutoServerRetries +1) + \' sucessive attempts to load \' + resourceType + \' have failed. Giving up.\', \'danger\');\n                 			_this.send(\"abortDataRequest\",resourceType);\n            				_this.hideWaitAnim();\n            				\n            				if (typeof callingController !== \"undefined\" && typeof completeAction !== \"undefined\")\n            				{\n                				callingController.send(completeAction,{error:1,commsError:1});\n            				}\n\n            				return;\n    					}\n    					\n    				}\n    			}\n    		}\n    	},\n\n    	// -----------------------------------------------------------------------------------------------\n    	\n    	\n    	getAllRefsets : function(callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:getAllRefSets (retry)\",retry);\n    		\n    		var _this 		= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n    	\n    		this.set(\"currentAllRefsets\",{callingController:callingController,completeAction:completeAction});	\n    		\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n    		\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		refsetsAdapter.findAll(user).then(function(response)\n    		{	\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				_this.hideWaitAnim();\n    				\n    				var publishedArray 		= [];\n    				var unpublishedArray 	= [];\n    				\n    				_this.refsets.setObjects(response);\n    				\n    				response.content.refsets.map(function(item)\n    				{\n    					if (item.published)\n    					{\n    						publishedArray.push(item);\n    					}\n    					else\n    					{\n    						unpublishedArray.push(item);					\n    					}\n    				});\n    								\n    				var sortedPublishedArray = publishedArray.sort(function(a,b)\n    				{\n    				    return new Date(b.publishedDate) - new Date (a.publishedDate);\n    				});			\n\n    				_this.publishedRefsets.setObjects(sortedPublishedArray);\n    			\n    				var sortedUnpublishedArray = unpublishedArray.sort(function(a,b)\n    				{\n    				    return new Date(b.publishedDate) - new Date (a.publishedDate);\n    				});			\n\n    				_this.unpublishedRefsets.setObjects(sortedUnpublishedArray);\n\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    				{\n    					callingController.send(completeAction,{error:0});\n    				}\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Get list of refsets\',\'getAllRefsets\',[],callingController,completeAction,retryCounter);\n    			}\n    		});\n    	},\n    	\n    	getRefset : function(id,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.data:getRefset (id,callingController,completeAction,retry)\",id,callingController,completeAction,retry);\n\n    		this.set(\"currentRefset\",{id:id,callingController:callingController,completeAction:completeAction});\n    		\n    		var _this 		= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n    		\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		refsetsAdapter.find(user,id).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				_this.hideWaitAnim();\n\n    				response.content.refset.meta = {};\n    				_this.set(\"refset\",response.content.refset);\n    				\n    				// Now get member data...\n    				\n    				if (typeof _this.refset.members === \"undefined\")\n    				{\n    					_this.set(\"refset.members\",[]);\n    				}\n    				\n    				var idArray = _this.refset.members.map(function(member)\n    				{\n    					if (typeof member.referencedComponentId !== \"undefined\")\n    					{\n    						return member.referencedComponentId;						\n    					}\n    					else\n    					{\n    						return null;\n    					}\n    				});		\n\n    				// Strip nulls\n    				idArray = $.grep(idArray,function(n){ return(n); });\n    				\n    				if (idArray.length)\n    				{\n    					_this.getMembers(idArray).then(function(conceptData)\n    					{\n    						var MemberData = _this.refset.members.map(function(member)\n    						{\n    							member.meta = {};\n    	\n    							if (typeof conceptData[member.referencedComponentId] !== \"undefined\" && conceptData[member.referencedComponentId] !== null)\n    							{\n    								member.meta.description 			= conceptData[member.referencedComponentId].label;\n    								member.meta.conceptActive 			= conceptData[member.referencedComponentId].active;\n    								member.meta.conceptModuleId 		= conceptData[member.referencedComponentId].moduleId;\n    								member.meta.conceptEffectiveTime 	= conceptData[member.referencedComponentId].effectiveTime;\n    								member.meta.found 					= true;\n    								member.meta.deleteConcept			= false;\n    								\n    								member.meta.originalActive			= member.active;\n    								member.meta.originalModuleId		= member.moduleId;\n    							}\n    							else\n    							{\n    								member.meta.description 			= \'Concept not found in Snomed CT database\';\n    								member.meta.found 					= false;\n    								member.meta.deleteConcept			= false;\n    							}\n    							\n    							return member;\n    						});\n    						\n    						_this.refset.members.setObjects(MemberData);\n    						\n    						if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    						{\n    							callingController.send(completeAction,{error:0});\n    						}\n    					});\n    				}\n    				else\n    				{\n    					if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    					{\n    						callingController.send(completeAction,{error:0});\n    					}\n    				}\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Refset\',\'getRefset\',[id],callingController,completeAction,retryCounter);\n    			}\n    		});\n    	},\n    	\n    	createRefset : function(refset,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.data:createRefset (retry,callingController,completeAction,retry)\",retry,callingController,completeAction,refset);\n\n    		var _this 		= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n    		\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n    		\n    		refsetsAdapter.create(user,refset).then(function(response)\n    		{\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				Ember.Logger.log(\"Refset created:\",response.content.id);\n    				\n    				refset.id = response.content.id;		\n    		\n    				_this.set(\"model\",refset);\n    				\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    				{\n    					callingController.send(completeAction,{error:0,id:refset.id});				\n    				}\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Create refset\',\'createRefset\',[refset],callingController,completeAction,retryCounter);\n    			}\n    		});\n    	},\n\n    	deleteRefset : function(refsetId,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.data:deleteRefset (refsetId,callingController,completeAction,retry)\",refsetId,callingController,completeAction,retry);\n\n    		var _this 			= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n    		\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n    		\n    		refsetsAdapter.deleteRefset(user,refsetId).then(function(response)\n    		{\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				Bootstrap.GNM.push(\'Refset Service\',\'Refset created\', \'info\');\n\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    				{\n    					callingController.send(completeAction,{error:0});				\n    				}\n    			}	\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Delete refset\',\'deleteRefset\',[refsetId],callingController,completeAction,retryCounter);\n    			}\n    		});\n    	},\n    	\n    	updateRefset : function(refset,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.data:updateRefset (refset,callingController,completeAction,retry)\",refset,callingController,completeAction,retry);\n\n    		var _this 			= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n    		\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n    		\n    		refsetsAdapter.update(user,refset).then(function(response)\n    		{\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				Bootstrap.GNM.push(\'Refset Service\',\'Refset updated\', \'info\');\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    				{\n    					callingController.send(completeAction,{error:0});\n    				}\n    			}	\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Update refset\',\'updateRefset\',[refset],callingController,completeAction,retryCounter);\n    			}\n    		});\n    	},\n    	\n    	addMembers : function(refsetId,members,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:addMembers (members,retry)\",members,retry);\n\n    		var _this 			= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n\n    		var loginController = this.get(\'controllers.login\');\n    		var user 			= loginController.user;\n\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		var result = refsetsAdapter.addMembers(user,refsetId,members).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			_this.hideWaitAnim();\n\n    			if (typeof response.meta === \"undefined\" || typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    				{\n    					callingController.send(completeAction,{error:0,refsetId:refsetId,members:response.content.outcome});	\n    				}\n    				\n    				_this.getRefset(refsetId);\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Add members to refset\',\'addMembers\',[refsetId,members],callingController,completeAction,retryCounter);\n    			}\n    		});\n    		\n    		return result;\n    	},\n    	\n    	\n    	getMembers : function(members,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:getMembers (members,retry)\",members,retry);\n\n    		var _this 			= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		var memberDetails = membersAdapter.findList(user,members).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			_this.hideWaitAnim();\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				return response.content.concepts;\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Get refset member details\',\'getMembers\',[members],callingController,completeAction,retryCounter);\n    				return {};\n    			}			\n    		});	\n    		\n    		return memberDetails;\n    	},\n    	\n    	getMember : function(id,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:getMember (id,retry)\",id,retry);\n\n    		var _this 		= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n\n    		if (typeof this.concepts[id] !== \"undefined\")\n    		{\n    			return new Ember.RSVP.Promise(function(resolve){resolve(_this.concepts[id]);});\n    		}\n    		\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		var memberDetails = membersAdapter.find(user,id).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			_this.hideWaitAnim();\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    			//	_this.set(\"concepts[\" + id + \"]\",response.content.concept); \n    				return response.content.concept;\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Get refset memebr details\',\'getMember\',[id],callingController,completeAction,retryCounter);\n    				return {label:\'not found\'};\n    			}			\n    		});	\n    		\n    		return memberDetails;\n    	},\n    	\n    	deleteMembers : function(refsetId,members,callingController,completeAction,retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:deleteMembers (members,retry)\",members,retry);\n\n    		var _this 			= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		refsetsAdapter.deleteMembers(user,refsetId,members).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			_this.hideWaitAnim();\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				if (typeof callingController !== \"undefined\" && typeof completeAction !== \'undefined\')\n    				{\n    					callingController.send(completeAction,response.content.outcome);\n    				}\n    				\n    				_this.getRefset(refsetId);		\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Delete refset members\',\'deleteMembers\',[refsetId,members],callingController,completeAction,retryCounter);\n    			}\n    		});	\n    	},\n    	\n    	getSnomedRefsetTypes : function(retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:getSnomedRefsetTypes (retry)\",retry);\n    		\n    		if (this.refsetTypes.length)\n    		{\n    			return;\n    		}\n    		\n    		var _this 		= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n    		\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		var promise = snomedTypesAdapter.getRefsetTypes(user).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				_this.hideWaitAnim();\n    				_this.set(\"refsetTypes\",response.content.refsetTypes);\n    				\n    				for (var x=0;x<RefsetENV.APP.supportedSnomedTypes.refsetTypes.length;x++)\n    				{\n    					var id = RefsetENV.APP.supportedSnomedTypes.refsetTypes[x];	\n    					_this.refsetTypesArray.pushObject({id:id,label:response.content.refsetTypes[id].replace(/ *\\([^)]*\\) */g, \"\")});\n    				}\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Get refset types\',\'getSnomedRefsetTypes\',[],retryCounter);\n    			}\n    			return response;\n    		});	\n    		\n    		return promise; \n    	},\n\n    	getSnomedModulesTypes : function(retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:getSnomedModulesTypes (retry)\",retry);\n    		\n    		if (this.moduleTypes.length)\n    		{\n    			return;\n    		}\n\n    		var _this 		= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n    		\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		var promise = snomedTypesAdapter.getModules(user).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				_this.hideWaitAnim();\n    				_this.set(\"moduleTypes\",response.content.modules);	\n    				\n    				for (var id in response.content.modules)\n    				{\n    					_this.moduleTypesArray.pushObject({id:id,label:response.content.modules[id].replace(/ *\\([^)]*\\) */g, \"\")});\n    				}\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Get module types\',\'getSnomedModulesTypes\',[],retryCounter);\n    			}\n    			return response;\n    		});	\n    		\n    		return promise;\n    	},\n\n    	getSnomedComponentTypes : function(retry)\n    	{\n    		Ember.Logger.log(\"controllers.refsets:getSnomedComponentTypes (retry)\",retry);\n    		\n    		if (this.componentTypes.length)\n    		{\n    			return;\n    		}\n\n    		var _this 			= this;\n    		var retryCounter 	= (typeof retry === \"undefined\" ? 0 : retry);\n\n    		var loginController = this.get(\'controllers.login\');\n    		var user = loginController.user;\n    		\n    		this.set(\"callsInProgressCounter\",this.callsInProgressCounter+1);\n\n    		if (!retryCounter)\n    		{\n    			this.showWaitAnim();\n    		}\n    		\n    		var promise = snomedTypesAdapter.getComponentTypes(user).then(function(response)\n    		{\n    			_this.set(\"callsInProgressCounter\",_this.callsInProgressCounter-1);\n\n    			if (typeof response.meta.errorInfo === \'undefined\')\n    			{\n    				_this.hideWaitAnim();\n    				_this.set(\"componentTypes\",response.content.componentTypes);\n\n    				for (var x=0;x<RefsetENV.APP.supportedSnomedTypes.componentTypes.length;x++)\n    				{\n    					var id = RefsetENV.APP.supportedSnomedTypes.componentTypes[x];					\n    					_this.componentTypesArray.pushObject({id:id,label:response.content.componentTypes[id].replace(/ *\\([^)]*\\) */g, \"\")});\n    				}\n    			}\n    			else\n    			{\n    				_this.handleRequestFailure(response,\'Get refset component types\',\'getSnomedComponentTypes\',[],retryCounter);\n    			}\n    			\n    			return response;\n    		});		\n    		\n    		return promise;\n    	},\n\n    });\n  });//# sourceURL=refset/controllers/data.js");

;eval("define(\"refset/controllers/login\", \n  [\"refset/adapters/login\",\"refset/models/user\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var LoginAdapter = __dependency1__[\"default\"];\n    var User = __dependency2__[\"default\"];\n\n    var loginAdapter = LoginAdapter.create();\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n\n    	needs 				: [\"refsets\",\"utilities\",\"data\"],\n\n    	loginDialogOpen		: false,			// Indicates that we have an open login dialog window\n    	autoLoggedOut		: false,			// Indicates that the user was logged out automatically through inactivity\n    	loginError			: null,				// Contains any relevant login error message\n    	username			: null,				// Bound to the login form input field\n    	password			: \'\',				// Holds the user\'s password between form entry and the authentication call\n    	user				: User.create(),	// A dummy user record. Overwritten upon login\n    	logoutDialogOpen	: false,			// Are we showing an auto-logout alert?\n    	loginDialogRef		: null,\n\n    	loginExpiryLength 	: RefsetENV.APP.loginExpiry * 60 * 1000, // Setting is in MINUTES, we need milliseconds here. This is the inactivity period before auto logout\n    	\n    	showLogoutTimer		: Ember.computed.lte(\"logoutTimerDisplay\",200),	// Only show the logout progress bar if there are 100 seconds or less left until logout.\n    	\n    	logoutTimerDisplay 	: function() 		// A auto calculated property which returns how many seconds are left until user is automatically logged out\n    	{\n    		return this.getSecondsLeftToAutoLogout();\n    	}.property(\"user\"),\n    	\n    	logoutProgressDisplay : function() 		// A auto calculated property which returns a range of 1-100 for the progress bar showing how long until user is automatically logged out\n    	{\n    		var secondsLeft = this.getSecondsLeftToAutoLogout();\n    		\n    		return (secondsLeft / 2);\n    	}.property(\"user\"),\n    	\n    	showLoginForm : function()\n    	{\n    		var _this = this;\n    		\n    		// In case logout alert is showing, close it.\n    		this.send(\"closeLogoutAlertModal\");\n    		\n    		if (!this.loginDialogOpen)\n    		{\n    			this.set(\"loginDialogOpen\",true);\n    			\n    			var loginFormSource   = $(\"#login-form\").html();\n    			var loginFormTemplate = Handlebars.compile(loginFormSource.replace(/(\\r\\n|\\n|\\r)/gm, \'\'));\n    			var context = {autoLoggedOut: this.autoLoggedOut, username: this.user.name, forgotPasswordLink:RefsetENV.APP.passwordResetURL,timeout:RefsetENV.APP.loginExpiry};\n    			var loginFormHTML = loginFormTemplate(context);\n    			\n    			var loginDialog = BootstrapDialog.show({\n    	            title: \'<img src=\"assets/img/login.white.png\"> Authentication Required\',\n    	            closable: false,\n    	            message: loginFormHTML,\n    	            buttons: \n    	            [\n    	             	{\n    	             		label		: \'Register\',\n    	             		cssClass	: \'btn-default left\',\n    	             		action		: function(dialog)\n    	             		{\n    	             			_this.set(\"loginDialogOpen\",false);\n    	             			dialog.close();\n    	             			_this.showRegistrationForm();\n    	             		}\n    	             	},\n    	             	{\n    	             		label	: \'Continue as a guest\',\n    	             		action	: function(dialog)\n    	             		{\n    	             			_this.set(\"loginDialogOpen\",false);\n    	             			dialog.close();\n    	             		}\n    	             	},\n    	             	{\n    	             		label		: \'Login\',\n    	             		cssClass	: \'btn-primary\',\n    	             		icon		: \'glyphicon glyphicon-user\',\n    	             		id 			: \'submit-btn\',\n    	             		hotkey		: 13, // Enter key\n    	             		action 		: function(dialog)\n    	             		{\n    	             			var btn = this;\n    	             			btn.spin();\n\n    	             			_this.login($(\'#loginFormUsername\').val(),$(\'#loginFormPassword\').val()).then(function(loginResult)\n    	             			{\n    		             			if (loginResult)\n    		             			{\n    		             				_this.set(\"loginDialogOpen\",false);\n    		             				dialog.close();\n    		             			}\n    		             			else\n    		             			{\n    			             			btn.stopSpin();		             									             				\n    		             			}\n    	             			});\n    	             		}\n    	             	}\n    	             ]\n    	        });	\n    			\n    			this.set(\"loginDialogRef\",loginDialog);\n    		}\n    			\n    	},\n    	\n    	login : function(username,password)\n    	{\n    		var _this = this;\n    		\n    		return loginAdapter.authenticate(username,password).then(function(authResult)\n    		{\n    			var user = authResult.user;\n    			\n    			if (authResult.authenticated)\n    			{\n    				return loginAdapter.isPermittedToUseRefset(user.name).then(function(permissionResult)\n    				{\n    					if (permissionResult)\n    					{\n    						user.autoLogoutTime = new Date(new Date().getTime() + _this.loginExpiryLength);\n    						user.loginDeclined	= false;\n\n    						_this.saveUserToLocalStore(user);\n             				_this.initUserInteractionEvents();\n    						\n    						var dataController = _this.get(\'controllers.data\');\n    						dataController.authenticationStatusChanged();\n\n    						Bootstrap.GNM.push(\'Authenticated\',\'You have sucessfully logged in\', \'info\');\n    					}\n    					else\n    					{\n    						Bootstrap.GNM.push(\'Unauthorised\',\'You do not have permission to acccess this application\', \'warning\');\n    					}\n    					return permissionResult;\n    				});			\n    			}\n    			else\n    			{\n    				Bootstrap.GNM.push(\'Unauthorised\',\'Your username and/or password were not accepted\', \'warning\');\n    				return false;\n    			}\n    			\n    		});\n    	},\n    	\n    	// Log the user out of the app\n    	logout : function()\n    	{\n    		var user = $.extend(true, {}, this.user);\n    		\n    		// This has the effect of logging the user out\n    		user.token = null;\n\n    		// Store our modified user record in the Local Store\n    		this.saveUserToLocalStore(user);\n\n    		// Since we changed authentication state, we need to refresh our list of refsets.\n    		// This will be moved to a common data refresh handler at a later date\n    		var dataController = this.get(\'controllers.data\');\n    		dataController.authenticationStatusChanged();\n    		\n    		// No need to monitor user activity once they have been logged out\n    		this.stopUserInteractionEvents();\n    		\n    		// Show the login form\n    		this.showLoginForm();\n    	},\n    	\n    	registerButtons : \n    	[\n    		Ember.Object.create({title: \'Cancel\', clicked: \'closeRegistrationModal\'}),\n       		Ember.Object.create({title: \'Register\', clicked:\'registerUser\', type:\"primary\"})\n    	],\n    	\n    	// Show the registration modal dialog\n    	showRegistrationForm: function() \n    	{\n    		Bootstrap.ModalManager.open(\'registrationModal\', \'<img src=\"assets/img/login.png\"> Snomed CT\', \'registration\', this.registerButtons, this); // modal ID, title, template (hbs), buttons, controller (usually this)\n    	},\n    	\n       	init : function()\n    	{	\n       		var _this = this;\n       		\n       	   	// When we start up we want to check the Local Store to see if the user may already be logged in\n       		this.monitorLoginViaLocalStore();\n       		setInterval(function(){_this.monitorLoginViaLocalStore();},1000);\n    		\n    		// Show the login form if needed\n    		if(this.user.token === null && !this.user.loginDeclined)\n    		{\n    			this.showLoginForm();\n    		}\n    	},\n\n    	// Calculates the number of seconds of inactivity remaining before the user will be auto logged out\n    	getSecondsLeftToAutoLogout : function()\n    	{\n    		var autoLogoutTime 		= new Date(this.user.autoLogoutTime);\n    		var timeLeftToLogout 	= parseInt((autoLogoutTime.getTime() - new Date().getTime()) /1000); // seconds\n\n    		if (this.user.token !== null && !this.logoutDialogOpen && timeLeftToLogout < 90)\n    		{\n    			this.set(\"logoutDialogOpen\",true);\n    			Bootstrap.ModalManager.open(\'logoutModal\', \'<img src=\"assets/img/login.png\"> Snomed CT\', \'logout-alert\', this.logoutButtons, this); // modal ID, title, template (hbs), buttons, controller (usually this)\n    		}\n\n    		return timeLeftToLogout;\n    	},\n\n    	// Check the Local Store every second to see if out user record has been overwritten by another window\n    	monitorLoginViaLocalStore : function()\n    	{\n    		var controller 	= this.get(\'controllers.utilities\');\n    		var userData 	= controller.getDataFromSessionStore(\'user\');\n    		var refreshData = false;\n\n    		if (userData.status === \'ok\' && userData.data !== null)\n    		{\n    			// If user not logged in here, but has logged in on another window then we need to act as if the user has logged in here\n    			if (this.user.token === null && userData.data.token !== null)\n    			{\n    				this.initUserInteractionEvents();\n    				this.send(\'closeLoginModal\');\n    				\n    				refreshData = true;\n    			}\n    			else\n    			{\n    				if (this.user.token !== null && userData.data.token === null)\n    				{\n    					refreshData = true;\n    				}				\n    			}\n    			\n    			// Save the user record from the Local Store into this controller\n    			this.set(\"user\",userData.data);\n    			\n    			if (this.getSecondsLeftToAutoLogout() < 0)\n    			{\n    				this.send(\"closeLogoutAlertModal\");\n    				this.showLoginForm();\n    			}\n    			\n    			if (refreshData)\n    			{\n    				var dataController 	= this.get(\'controllers.data\');\n    				dataController.authenticationStatusChanged();				\n    			}\n\n    			// If we do not already have a username, then use the one from the Store. We only do this once, otherwise it will prevent you entering a username in the login form since it is bound to this value.\n    			if (this.name === null)\n    			{\n    				this.set(\"name\",userData.data.name);				\n    			}\n    		}\n\n    		// Calculate how long the user has been inactive\n    		var timeLeftToAutoLogout = this.getSecondsLeftToAutoLogout();\n    		\n    		// If user is currently logged in and inactivity period has been exceeded then log the user out\n    		if (this.user.token !== null && timeLeftToAutoLogout <= 0)\n    		{\n    			// Enable the \"you\'ve been auto logged out\" message in the login dialog\n    			Bootstrap.GNM.push(\'Session Timeout\',\'You have been logged out after \' + RefsetENV.APP.loginExpiry + \' minutes of inactivity\', \'warning\');\n\n    			this.set(\"autoLoggedOut\",true);\n    			this.logout();\n    		}\n    	},\n    	\n    	// Events handlers to detect ANY user interaction. Used to reset the inactivity timer.\n    	initUserInteractionEvents : function()\n    	{\n    	    $(document).mousemove(function () {\n    			var controller = Refset.__container__.lookup(\"controller:login\");\n    			controller.send(\'resetAutoLogoutTimer\');\n    	    });\n    	    \n    	    $(document).keypress(function () {\n    			var controller = Refset.__container__.lookup(\"controller:login\");\n    			controller.send(\'resetAutoLogoutTimer\');\n    	    });\n    	},\n\n    	// Disable the user interaction event handlers (when user is logged out)\n    	stopUserInteractionEvents : function()\n    	{\n    		// Stop bothering to monitor user events\n    	    $(document).unbind(\'mousemove\');\n    	    $(document).unbind(\'keypress\');\n    	},\n    	\n    	// Save the supplied user record both into this controller and into the Local Store\n    	saveUserToLocalStore : function(user)\n    	{\n    		this.set(\'user\',user);\n    		\n    		var UtilitiesController = this.get(\'controllers.utilities\');						\n    		UtilitiesController.storeDataInSessionStore(\'user\',user);\n    	},\n\n    	actions : \n    	{\n    		logout : function()\n    		{\n    			this.logout();\n    		},\n\n    		closeLoginModal : function()\n    		{\n    			if (this.loginDialogOpen)\n    			{\n    				this.loginDialogRef.close();\n    			}\n    			\n    			this.set(\"loginDialogOpen\",false);\n    		},\n\n    		closeLogoutAlertModal: function()\n    		{\n    			if (this.logoutDialogOpen)\n    			{\n    				Bootstrap.ModalManager.close(\'logoutModal\');\n    			}\n    			\n    			this.set(\"logoutDialogOpen\",false);\n    		},\n\n    		closeRegistrationModal: function()\n    		{\n    			Bootstrap.ModalManager.close(\'registrationModal\');\n    			\n    			this.set(\"loginDialogOpen\",false);\n     		},\n    		\n    		// For now registration consists only of opening the users mail client with some pre-filled in information.\n    		registerUser: function()\n    		{\n    			var regBody = \"Name : \" + this.regname + \"%0A%0A\";\n    			regBody += \"Phone : \" + this.regphone + \"%0A%0A\";\n    			regBody += \"IHTSDO Login : \" + this.reguser + \"%0A%0A\";\n    			regBody += \"Nationality : \" + this.regnationality + \"%0A%0A\";\n    			regBody += this.regnotes;\n    			\n    			window.location.href = \'mailto:\' + RefsetENV.APP.RegistrationEmail + \'?subject=Request for access to Snomed CT&body=\' + regBody;\n    			this.send(\'closeRegistrationModal\');\n    		},	\n    		\n    		// If user elects to use the app as a guest then we need to record that fact in order so we can choose not to show the login form if they open another window.\n    		continueAsGuest : function()\n    		{\n    			var user = $.extend(true, {}, this.user);\n    			user.loginDeclined = true;\n\n    			this.saveUserToLocalStore(user);\n    			\n    			Bootstrap.ModalManager.close(\'loginModal\');\n    		},\n    		\n    		// This function is called every time the user makes any interaction with the browser - mouse move, or keypress\n    		// We reset the time the user will be auto logged out because of inactivity.\n    		resetAutoLogoutTimer : function()\n    		{\n    			this.send(\"closeLogoutAlertModal\");\n\n    			var user = $.extend(true, {}, this.user);\n    			\n    			user.autoLogoutTime	= new Date(new Date().getTime() + this.loginExpiryLength);\n    						\n    			this.saveUserToLocalStore(user);\n    		},\n\n    	}\n    	\n    });\n  });//# sourceURL=refset/controllers/login.js");

;eval("define(\"refset/models/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var User = Ember.Object.extend({\n    	  name:    		     null,\n    	  firstName:        \'Guest\',\n    	  lastName:         null,\n    	  token:			null,\n    	  permissionGroups: null,\n    	  logoutTimer:		0,\n    	  autoLogoutTime:	new Date(),\n    	  loginDeclined:	false\n    });\n\n    __exports__[\"default\"] = User;\n  });//# sourceURL=refset/models/user.js");

;eval("define(\"refset/controllers/news\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n    	\n    	model : \n    	[\n    		{\n    	    	\"id\": \"news\",\n    	    	\"title\": \"News...\",\n    	    	\"published\": \"2014-09-02T10:00:00\",\n    	    	\"description\": \"We will use this news section to post information about updates to the app. There is no back-end for this for now. Possibly in the future. For now, it\'s coded into the app, which is fine since we\'ll need to re-deploy when we make changes anyway. This is just to let users know about new features etc. in each release.\"\n    	    },\n    		{\n    	    	\"id\": \"authentication\",\n    	    	\"title\": \"User Authentication\",\n    	    	\"published\": \"2014-09-02T09:00:00\",\n    	    	\"description\": \"The app now integrated with the user authentication server. You may log in/log out. App checks that you have permission to use it. There is also a form to guide you through registering to use the app.\"\n    	    },\n        ],\n        \n        latestNews : [],\n        \n        init : function()\n        {\n        	this.getLatestNews();\n        },\n        \n    	getLatestNews : function()\n    	{\n    		var allNews = Ember.copy(this.model);\n    		this.latestNews.setObjects(allNews.splice(0,1));\n    	},\n\n    });\n  });//# sourceURL=refset/controllers/news.js");

;eval("define(\"refset/controllers/refsets\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n    	\n    	needs 	: [\"login\"],\n\n    	user 	: Ember.computed.alias(\"controllers.login.user\"),\n\n    });\n  });//# sourceURL=refset/controllers/refsets.js");

;eval("define(\"refset/controllers/refsets/index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n    		\n    	needs 			: [\"data\",\"login\"],\n\n    	published 		: Ember.computed.alias(\"controllers.data.publishedRefsets\"),\n    	unpublished 	: Ember.computed.alias(\"controllers.data.unpublishedRefsets\"),\n    	user 			: Ember.computed.alias(\"controllers.login.user\"),\n    	\n    	initModel : function()\n    	{\n    		Ember.Logger.log(\"controllers.refsets.index:initModel\");\n    		\n    		var _this 			= this;\n    		var dataController 	= this.get(\'controllers.data\');\n    		\n    		// Run next so that we do not prevent the UI being displayed if the data is delayed...\n    		return Ember.run.next(function(){dataController.getAllRefsets(_this,\'getAllRefsetsComplete\');});\n    	},\n    	\n    	actions :\n    	{\n    		refresh : function()\n    		{\n    			Ember.Logger.log(\"controllers.refsets.index:actions:refresh\");\n    			var dataController = this.get(\'controllers.data\');\n    			dataController.getAllRefsets();\n    		},\n\n    		getAllRefsetsComplete : function(response)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.index:actions:getAllRefsetsComplete (response)\",response);\n\n    		},	\n    	}\n    	\n    });\n  });//# sourceURL=refset/controllers/refsets/index.js");

;eval("define(\"refset/controllers/refsets/new\", \n  [\"refset/models/refset\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var RefsetModel = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n    		\n    	needs : [\"login\",\"utilities\",\"refsets\",\"refsets/upload\",\"data\"],\n\n    	potentialMembersToImport	: Ember.computed.alias(\"controllers.refsets/upload.model\"),\n\n    	disablePublishedFormFields : true,\n    	\n    	getConceptDataInProgress 	: Ember.computed.alias(\"controllers.refsets/upload.getConceptDataInProgress\"),\n    	importError 				: Ember.computed.alias(\"controllers.refsets/upload.importError\"),\n    	\n    	dialogInstance : null,\n    		\n    	model : RefsetModel.create(),\n    	\n    	createEmptyRefset : function()\n    	{\n    		this.set(\"model\",RefsetModel.create());\n    		this.set(\"model.meta.createdDateInput\",null);\n    		this.set(\"model.meta.publishedDateInput\",null);\n    		this.set(\"disablePublishedFormFields\",true);\n    		\n    		var uploadController = this.get(\'controllers.refsets/upload\');		\n    		uploadController.clearMemberList();\n\n    		Ember.run.scheduleOnce(\'afterRender\', this, function(){\n    			document.getElementById(\'refsetUploadFileInput\').addEventListener(\'change\', readSingleFile, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'dragover\', handleDragOver, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'dragenter\', handleDragEnter, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'dragleave\', handleDragLeave, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'drop\', readSingleFile, false);\n    		});\n    	},\n    	\n    	create : function()\n    	{\n    		Ember.Logger.log(\"controllers.refsets.new:create\");\n    		\n    		var Refset = {};\n    		\n    		Refset.typeId = this.get(\"model.typeId\");\n    		Refset.componentTypeId = this.get(\"model.componentTypeId\");\n    		Refset.moduleId = this.get(\"model.moduleId\");\n    		Refset.active = this.get(\"model.active\");\n    		Refset.languageCode = this.get(\"model.languageCode\");\n    		Refset.description = this.get(\"model.description\");\n\n    		if (!this.disablePublishedFormFields)\n    		{\n    			Refset.id = this.get(\"model.id\");\n    			Refset.published = this.get(\"model.published\");\n    			Refset.publishedDate = this.get(\"model.publishedDate\");\n    			Refset.created = this.get(\"model.created\");\n    		}\n    		\n    		// Need to validate the form at this point and abort if required fields are not completed\n    				\n    		this.dialogInstance = BootstrapDialog.show({\n                title: \'<img src=\"assets/img/login.white.png\"> Creating your refset\',\n                closable: false,\n                message: \'<br><br><div class=\"centre\">We are creating your refset. Please wait...<br><br><img src=\"assets/img/googleballs-animated.gif\"></div><br><br>\',\n                buttons: [{\n                    label: \'OK\',\n                    cssClass: \'btn-primary\',\n                    action: function(dialogRef){\n                        dialogRef.close();\n                    }\n                }]\n            });\n    		this.dialogInstance.getModalFooter().hide();\n\n    		var dataController = this.get(\'controllers.data\');		\n    		dataController.createRefset(Refset,this,\'createRefsetComplete\');\n    	},\n\n        actions :\n        {\n        	createRefsetComplete : function(response)\n        	{\n        		Ember.Logger.log(\"controller.refsets.new:actions:createRefsetComplete\",response);\n\n        		if (response.error)\n        		{\n        			var message = \'<table class=\"centre\"><tr><td><img src=\"assets/img/warning.jpg\"></td><td style=\"vertical-align:middle\"><h2>Refset creation failed.</h2></td></tr></table>\';\n\n        			if (typeof response.unauthorised !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">You are not authorised to create refsets. You may need to log in.</p>\';\n        			}\n\n        			if (typeof response.commsError !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">We cannot communicate with the Refset API at this time. Retry later.</p>\';\n        			}\n\n        			this.dialogInstance.setMessage(message);\n        			this.dialogInstance.setType(BootstrapDialog.TYPE_WARNING);\n        			this.dialogInstance.getModalFooter().show();\n        		}\n        		else\n        		{\n        			var refsetId = response.id;\n        			\n        			this.transitionToRoute(\'refsets.refset\',response.id);\n\n        			var uploadController = this.get(\'controllers.refsets/upload\');		\n        			var conceptsToImport = uploadController.getMembersMarkedForImport();\n        			\n        			if (conceptsToImport.length)\n        			{\n            			this.dialogInstance.setMessage(\'<br><br><div class=\"centre\">Refset created.<br><br><div class=\"centre\">We are now importing concepts. Please wait...<br><br><img src=\"assets/img/googleballs-animated.gif\"></div><br><br>\');\n        		\n            			// Now initiate adding members to our new refset...\n            			\n            			var dataController = this.get(\'controllers.data\');		\n            			dataController.addMembers(refsetId,conceptsToImport,this,\'addMembersComplete\');	\n        			}\n        			else\n        			{\n            			this.dialogInstance.close();\n        			}\n        		}\n        	},\n\n        	addMembersComplete : function(response)\n        	{\n        		Ember.Logger.log(\"controller.refsets.new:actions:addMembersComplete\",response);\n    	\n        		if (response.error)\n        		{\n        			var message = \'<table class=\"centre\"><tr><td><img src=\"assets/img/warning.jpg\"></td><td style=\"vertical-align:middle\"><h2>Importing members failed.</h2></td></tr></table>\';\n\n        			if (typeof response.unauthorised !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">You are not authorised to add members. You may need to log in.</p>\';\n        			}\n\n        			if (typeof response.commsError !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">We cannot communicate with the Refset API at this time. Retry later.</p>\';\n        			}\n\n        			if (typeof response.requestError !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">The API rejected our request.</p>\';\n        			}\n\n        			this.dialogInstance.setMessage(message);\n        			this.dialogInstance.setType(BootstrapDialog.TYPE_WARNING);\n        			this.dialogInstance.getModalFooter().show();\n        		}\n        		else\n    			{\n        			this.dialogInstance.close();\n    			}\n        	},\n        	\n        	togglePublishedRefsetImportForm : function()\n        	{\n        		Ember.Logger.log(\"togglePublishedRefsetImportForm\",this.doImportPublishedRefset);\n        		this.set(\"doImportPublishedRefset\",$(\'#import\').is(\':checked\'));\n        	},\n\n    		toggleMembersImportForm : function()\n    		{\n    			Ember.Logger.log(\"togglePublishedRefsetImportForm\",this.doImportPublishedRefset);\n    			this.set(\"doImportMembers\",$(\'#import-members\').is(\':checked\'));\n\n    			if (this.doImportMembers)\n    			{\n    				Ember.run.next(this,function()\n    				{\n    					Ember.Logger.log(\"controllers.refsets.new:actions:toggleMembersImportForm (Setting event listeners)\");\n    					\n    					document.getElementById(\'refsetUploadFileInput\').addEventListener(\'change\', readSingleFile, false);\n    					document.getElementById(\'fileUploadDropZone\').addEventListener(\'dragover\', handleDragOver, false);\n    					document.getElementById(\'fileUploadDropZone\').addEventListener(\'drop\', readSingleFile, false);\n    				});\n    			}\n    			else\n    			{\n    				Ember.Logger.log(\"controllers.refsets.new:actions:toggleMembersImportForm (Clearing members)\");\n\n    				var uploadController = this.get(\'controllers.refsets/upload\');\n    				uploadController.clearMemberList();\n    			}\n    		},\n    		\n    		clearForm : function()\n    		{\n    			this.createEmptyRefset();\n    		},\n    		\n    		clearImportList : function()\n    		{\n    			var uploadController = this.get(\'controllers.refsets/upload\');		\n    			uploadController.clearMemberList();	\n    		}\n\n        }\n    });\n  });//# sourceURL=refset/controllers/refsets/new.js");

;eval("define(\"refset/models/refset\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Object.extend({\n    	id:	null,\n    	active 			: true,\n    	componentTypeId : RefsetENV.APP.defaultSnomedTypes.componentType,\n    	created 		: function()\n    						{\n    							var mydate = moment.utc(this.get(\"meta.createdDateInput\"),\'MMMM D, YYYY\');\n    							return mydate.isValid() ? mydate.format() : null;\n    						}.property(\'meta.createdDateInput\'),\n    	description		: null,\n    	languageCode 	: \'en_US\',\n    	members 		: [],\n    	moduleId		: RefsetENV.APP.defaultSnomedTypes.moduleType,\n    	published 		: function()\n    						{\n    							var mydate = moment.utc(this.get(\"meta.publishedDateInput\"),\'MMMM D, YYYY\');\n    							return mydate.isValid();\n    						}.property(\'meta.publishedDateInput\'),\n    	publishedDate 	: function()\n    						{\n    							var mydate = moment.utc(this.get(\"meta.publishedDateInput\"),\'MMMM D, YYYY\');\n    							return mydate.isValid() ? mydate.format() : null;\n    						}.property(\'meta.publishedDateInput\'),\n    	typeId 			: RefsetENV.APP.defaultSnomedTypes.refsetType,\n    	\n    	meta			:\n    	{\n    		createdDateInput 	: null,\n    		publishedDateInput 	: null,\n    	}\n    });\n  });//# sourceURL=refset/models/refset.js");

;eval("define(\"refset/controllers/refsets/refset\", \n  [\"refset/adapters/refsets\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var RefsetsAdapter = __dependency1__[\"default\"];\n    var refsetsAdapter = RefsetsAdapter.create();\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n    		\n    	needs : [\"login\",\"data\",\"application\",\"refsets/upload\"],\n    	\n    	model 				: Ember.computed.alias(\"controllers.data.refset\"),\n    	refsetTypes 		: Ember.computed.alias(\"controllers.data.refsetTypes\"),\n    	componentTypes 		: Ember.computed.alias(\"controllers.data.componentTypes\"),\n    	moduleTypes 		: Ember.computed.alias(\"controllers.data.moduleTypes\"),\n    	\n    	potentialMembersToImport	: Ember.computed.alias(\"controllers.refsets/upload.model\"),\n    	getConceptDataInProgress 	: Ember.computed.alias(\"controllers.refsets/upload.getConceptDataInProgress\"),\n    	importError 				: Ember.computed.alias(\"controllers.refsets/upload.importError\"),\n\n    	membersToDelete 	: [],\n    	membersToAdd		: [],\n\n    	members				: [],\n    	\n    	dialogInstance	: null,\n\n    	initModel : function(params)\n    	{\n    		Ember.Logger.log(\"controllers.refsets.refset:initModel\");\n    		\n    		var _this 			= this;\n    		var id 				= params.params[\"refsets.refset\"].id;\n    		var dataController 	= this.get(\'controllers.data\');\n    		\n    		// Run next so that we do not prevent the UI being displayed if the data is delayed...\n    		Ember.run.next(function()\n    		{\n    			dataController.getRefset(id,_this,\'getRefsetComplete\');			\n    		});\n    		\n    		var uploadController = this.get(\'controllers.refsets/upload\');		\n    		uploadController.clearMemberList();\n\n    		Ember.run.scheduleOnce(\'afterRender\', this, function(){\n    			document.getElementById(\'refsetUploadFileInput\').addEventListener(\'change\', readSingleFile, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'dragover\', handleDragOver, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'dragenter\', handleDragEnter, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'dragleave\', handleDragLeave, false);\n    			document.getElementById(\'fileUploadDropZone\').addEventListener(\'drop\', readSingleFile, false);\n    		});\n    	},\n\n    	importListChanged: function()\n    	{\n    		// Need  to check if we have any duplicates...\n    		var duplicates = [];\n    		\n    		var exisitingMembersArray = this.get(\"model\").members;\n    		var potentialMembersToImport = this.get(\"potentialMembersToImport\");\n    		\n    		for (var m=0;m<exisitingMembersArray.length;m++)\n    		{\n    			var existingMember = exisitingMembersArray[m];\n    			\n    			for (var i=0;i<potentialMembersToImport.length;i++)\n    			{\n    				var importMember = potentialMembersToImport[i];\n    				\n    				if (existingMember.referencedComponentId === importMember.referencedComponentId)\n    				{\n    					duplicates.push(importMember.meta.description);\n    					potentialMembersToImport[i] = null;\n    				}\n    			}\n    			potentialMembersToImport= $.grep(potentialMembersToImport,function(n){ return(n) });\n    		}\n    		\n    		var uploadController = this.get(\'controllers.refsets/upload\');\n    		uploadController.overrideImportList(potentialMembersToImport);\n\n    		if (duplicates.length)\n    		{\n    			var message = \'Your import file contains \' + duplicates.length + \' concepts which are already included in this refset. These will be excluded from the import.<br><br>\';\n    			\n    			for (var d=0;d<duplicates.length;d++)\n    			{\n    				message += duplicates[d] + \'<br>\';\n    			}\n    			\n    			this.dialogInstance = BootstrapDialog.show({\n    	            title: \'<img src=\"assets/img/login.white.png\"> Import members\',\n    	            closable: false,\n    	            message: message,\n    	            buttons: [\n                    {\n    	                label: \'OK\',\n    	                cssClass: \'btn-primary\',\n    	                action: function(dialogRef){\n    	            		dialogRef.close();\n    	                }\n    	            }]\n    	        });	\n    		}\n    		\n    		$(\"#importMembersForm\").collapse(\'hide\');\n    		\n    	}.observes(\'potentialMembersToImport.@each\'),\n    	\n    	actions :\n    	{\n    		getRefsetComplete : function (response)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:getRefsetComplete\",response);\n    			\n    			if (response.error)\n    			{\n    				// Model will then contain attributes that will modify the display...\n    				this.set(\"model\",response);\n    			}\n    		},\n\n    		updateRefset : function()\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:updateRefset (Refset)\",Refset);\n\n    			var _this = this;\n    			var refset = this.get(\"model\");\n    			\n    			// Members we are going to update\n    			\n    			var membersToUpdate = refset.members.map(function(obj)\n    			{\n    				var member = $.extend(true, {}, obj);\n    				\n    				if (member.meta.deleteConcept) {return null;}\n    				\n    				if (member.active === member.meta.originalActive && member.moduleId === member.meta.originalModuleId) {return null;}\n    				\n    				Ember.Logger.log(member.active,member.meta.originalActive,member.moduleId,member.meta.originalModuleId);	\n    				\n    				delete member[\"meta\"];\n    				\n    				return member;\n    			});\n    			membersToUpdate = $.grep(membersToUpdate,function(n){ return(n); });\n\n    			\n    			\n    			// members we are going to import\n    			\n    			\n    			var uploadController = this.get(\'controllers.refsets/upload\');		\n    			var conceptsToImport = uploadController.getMembersMarkedForImport();\n    			\n    			this.set(\"membersToAdd\",conceptsToImport);\n    			\n    			\n    			\n    			// Members we are going to delete\n    			\n    			var membersToDelete = refset.members.map(function(obj)\n    			{\n    				var member = $.extend(true, {}, obj);\n    				\n    				if (!member.meta.deleteConcept) {return null;}\n    				\n    				delete member[\"meta\"];\n    				\n    				return member;\n    			});\n    			this.set(\"membersToDelete\",$.grep(membersToDelete,function(n){ return(n);}));\n    						\n    			var message = \'<div class=\"centre\">Are you sure you wish to save your changes to this refset?</div><br><div class=\"centre\">\' + refset.description + \'<br><br>\';\n    				\n    			if (membersToUpdate.length || this.membersToAdd.length || this.membersToDelete.length)\n    			{\n    				message += \'<div class=\"centre\">You are \';				\n    			}\n    			\n    			if (membersToUpdate.length)\n    			{\n    				message += \'Updating \' + membersToUpdate.length + \' members\';\n    				\n    				if (this.membersToAdd.length || this.membersToDelete.length)\n    				{\n    					message += \', \';\n    				}\n    			}\n    			\n    			if (this.membersToAdd.length)\n    			{\n    				message += \'Adding \' + this.membersToAdd.length + \' members\';\n    				\n    				if (this.membersToDelete.length)\n    				{\n    					message += \', \';\n    				}\n    			}\n    			\n    			if (this.membersToDelete.length)\n    			{\n    				message += \'Deleting \' + this.membersToDelete.length + \' members\';	\n    			}\n\n    			\n    			if (membersToUpdate.length || this.membersToDelete.length || this.membersToAdd.length)\n    			{\n    				message += \'</div>\';\n    			}\n    			\n    			this.dialogInstance = BootstrapDialog.show({\n    	            title: \'<img src=\"assets/img/login.white.png\"> Update refset\',\n    	            closable: false,\n    	            message: message,\n    	            buttons: [{\n    	                label: \'No. Do not update\',\n    	                cssClass: \'btn-default left\',\n    	                action: function(dialogRef){\n    	                    dialogRef.close();\n    	                }\n    	            },\n                    {\n    	                label: \'Yes. Update refset\',\n    	                cssClass: \'btn-primary\',\n    	                action: function(dialogRef){\n    	                    _this.send(\"doUpdateRefset\",membersToUpdate);\n    	                    dialogRef.close();\n    	                }\n    	            }]\n    	        });			\n    		},\n    		\n    		doUpdateRefset : function(membersToUpdate)\n    		{\n    			var dataController = this.get(\'controllers.data\');\n    			var Refset = $.extend(true, {}, dataController.refset);\n    			\n    			// API barfs if we send it anything other than what it expects. So we keep extra data in meta so we can delete it easily...\n    			delete Refset[\"meta\"];\n\n    			Refset.members = membersToUpdate;\n    			\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:doUpdateRefset (Refset,membersToUpdate)\",Refset,membersToUpdate);\n    						\n    			this.dialogInstance = BootstrapDialog.show({\n    	            title: \'<img src=\"assets/img/login.white.png\"> Updating your refset\',\n    	            closable: false,\n    	            message: \'<br><br><div class=\"centre\">Updating. Please wait...<br><br><!-----><img src=\"assets/img/googleballs-animated.gif\"></div><br><br>\',\n    	            buttons: [{\n    	                label: \'OK\',\n    	                cssClass: \'btn-primary\',\n    	                action: function(dialogRef){\n    	                    dialogRef.close();\n    	                }\n    	            }]\n    	        });\n    			\n    			this.dialogInstance.getModalFooter().hide();\n    			\n    			dataController.updateRefset(Refset,this,\'updateRefsetComplete\');\n    		},	\n    		\n    		updateRefsetComplete : function(response)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:updateRefsetComplete\",response);\n    			\n        		if (response.error)\n        		{\n        			var message = \'<table class=\"centre\"><tr><td><img src=\"assets/img/warning.jpg\"></td><td style=\"vertical-align:middle\"><h2>Refset update failed.</h2></td></tr></table>\';\n\n        			if (typeof response.unauthorised !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">You are not authorised to update this refset. You may need to log in.</p>\';\n        			}\n\n        			if (typeof response.commsError !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">We cannot communicate with the Refset API at this time. Retry later.</p>\';\n        			}\n\n        			this.dialogInstance.setMessage(message);\n        			this.dialogInstance.setType(BootstrapDialog.TYPE_WARNING);\n        			this.dialogInstance.getModalFooter().show();\n        		}\n        		else\n        		{\n    				var dataController = this.get(\'controllers.data\');\n\n    				// Now Add / Delete any necessary members...\n    				if (this.membersToAdd.length)\n        			{\n        				// Need to add some members...\n\n    					var oldAddMessage = this.dialogInstance.getMessage();\n        				var newAddMessage = oldAddMessage.replace(/<!----->/,\'<div class=\"centre\">Adding new members</div><br><br><!----->\');\n        				\n        				this.dialogInstance.setMessage(newAddMessage);\n\n        				dataController.addMembers(this.get(\"model\").id,this.membersToAdd,this,\'addMembersComplete\');\n        			}\n        			else\n        			{\n            			if (this.membersToDelete.length)\n        				{\n            				// Need to delete some members...\n            				\n            				var oldDelMessage = this.dialogInstance.getMessage();\n            				var newDelMessage = oldDelMessage.replace(/<!----->/,\'<div class=\"centre\">Deleting unwanted members</div><br><br><!----->\');\n            				\n            				this.dialogInstance.setMessage(newDelMessage);\n            				\n            				dataController.deleteMembers(this.get(\"model\").id,this.membersToDelete,this,\'deleteMembersComplete\');\n        				}\n        				else\n        				{\n        					// Nothing do do...\n        	    			this.dialogInstance.close();\n        				}\n        			}\n        		}	\n    		},\n\n    		addMembersComplete : function(response)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:addMembersComplete\",response);\n\n    			var uploadController = this.get(\'controllers.refsets/upload\');		\n    			uploadController.clearMemberList();\n    			\n    			if (this.membersToDelete.length)\n    			{\n    				// Need to delete some members...\n    				\n    				var oldMessage = this.dialogInstance.getMessage();\n    				var newMessage = oldMessage.replace(/<!----->/,\'<div class=\"centre\">Deleting unwanted members</div><br><br><!----->\');\n    				\n    				this.dialogInstance.setMessage(newMessage);\n    				\n    				var dataController = this.get(\'controllers.data\');\n    				dataController.deleteMembers(this.get(\"model\").id,this.membersToDelete,this,\'deleteMembersComplete\');\n    			}\n    			else\n    			{\n    				// Nothing do do...\n        			this.dialogInstance.close();\n    			}\n    		},\n\n    		\n    		deleteMembersComplete : function(response)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:deleteMembersComplete\",response);\n\n    			// Nothing do do...\n    			this.dialogInstance.close();\n    		},\n\n    		exportRefset : function(id)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:exportRefset (id)\",id);\n    			\n    			var loginController = this.controllerFor(\'login\');\n    			var user = loginController.user;\n    			\n    			refsetsAdapter.getRefsetExport(user, id).then(function(exportFile)\n    			{\n    				var blob = new Blob([exportFile], {type: \"text/plain;charset=utf-8\"});\n    				saveAs(blob, id + \".rf2\");\n    			});	\n    		},	\n    		\n    		deleteRefset : function(id)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:deleteRefset (id)\",id);\n    			\n    			var _this = this;\n    			var refset = this.get(\"model\");\n    			\n    			this.dialogInstance = BootstrapDialog.show({\n    	            title: \'<img src=\"assets/img/login.white.png\"> Delete refset\',\n    	            closable: false,\n    	            message: \'<br><br><div class=\"centre\">Are you sure you wish to delete this refset?</div><br><br><div class=\"centre\">\' + refset.description + \'<br><br>\',\n    	            buttons: [{\n    	                label: \'No. Do not delete\',\n    	                cssClass: \'btn-default left\',\n    	                action: function(dialogRef){\n    	                    dialogRef.close();\n    	                }\n    	            },\n                    {\n    	                label: \'Yes. Delete refset\',\n    	                cssClass: \'btn-primary\',\n    	                action: function(dialogRef){\n    	                    _this.send(\"doDeleteRefset\",id);\n    	                    dialogRef.close();\n    	                }\n    	            }]\n    	        });\n    		},	\n    		\n    		doDeleteRefset : function(id)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:deleteRefset (id)\",id);\n    						\n    			this.dialogInstance = BootstrapDialog.show({\n    	            title: \'<img src=\"assets/img/login.white.png\"> Deleting your refset\',\n    	            closable: false,\n    	            message: \'<br><br><div class=\"centre\">Deleting. Please wait...<br><br><img src=\"assets/img/googleballs-animated.gif\"></div><br><br>\',\n    	            buttons: [{\n    	                label: \'OK\',\n    	                cssClass: \'btn-primary\',\n    	                action: function(dialogRef){\n    	                    dialogRef.close();\n    	                }\n    	            }]\n    	        });\n    			\n    			this.dialogInstance.getModalFooter().hide();\n    			\n    			var dataController = this.get(\'controllers.data\');\n    			dataController.deleteRefset(id,this,\'deleteRefsetComplete\');\n    		},\n    	\n    		deleteRefsetComplete : function (response)\n    		{\n    			Ember.Logger.log(\"controllers.refsets.refset:actions:deleteRefsetComplete\",response);\n    			\n        		if (response.error)\n        		{\n        			var message = \'<table class=\"centre\"><tr><td><img src=\"assets/img/warning.jpg\"></td><td style=\"vertical-align:middle\"><h2>Refset deletion failed.</h2></td></tr></table>\';\n\n        			if (typeof response.unauthorised !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">You are not authorised to delete refsets. You may need to log in.</p>\';\n        			}\n\n        			if (typeof response.commsError !== \"undefined\")\n        			{\n        				message += \'<br><br><p class=\"centre\">We cannot communicate with the Refset API at this time. Retry later.</p>\';\n        			}\n\n        			this.dialogInstance.setMessage(message);\n        			this.dialogInstance.setType(BootstrapDialog.TYPE_WARNING);\n        			this.dialogInstance.getModalFooter().show();\n        		}\n        		else\n        		{\n        			this.dialogInstance.close();\n        			this.transitionToRoute(\'refsets\');\n        		}\n    		},\n    		\n    		clearImportList : function()\n    		{\n    			var uploadController = this.get(\'controllers.refsets/upload\');		\n    			uploadController.clearMemberList();	\n    		}\n    	}\n    });\n  });//# sourceURL=refset/controllers/refsets/refset.js");

;eval("define(\"refset/controllers/refsets/upload\", \n  [\"refset/adapters/simple-members\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MembersAdapter = __dependency1__[\"default\"];\n    var membersAdapter = MembersAdapter.create();\n\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n    	\n    	needs : [\"login\"],\n    	\n    	model : [],\n    	\n    	importRequiredFilteredModel : function()\n    	{\n    		var concepts = this.get(\'model\');\n    		\n    		Ember.Logger.log(\"importRequiredFilteredModel concepts\",concepts);\n\n    		return concepts.filter(function(concept)\n    		{\n    			return !concept.meta.deleteConcept;\n    		});\n    	}.property(\'model\'),\n    	\n        importError : null,\n\n    	clearMemberList : function()\n    	{\n    		this.model.setObjects([]);\n    	},\n    	\n    	overrideImportList : function(newList)\n    	{\n    		this.model.setObjects(newList);\n    	},\n    	\n    	getConceptDataInProgress : false,\n\n    	clearMembers : function()\n    	{\n    		this.model.setObjects([]);\n    	},\n    	\n    	getMembersMarkedForImport : function()\n    	{\n    		var concepts = this.get(\'model\');\n    		\n    		var conceptsToImport =  concepts.map(function(concept)\n    		{\n    			var validConcept = $.extend(true, {}, concept);\n    			\n    			delete validConcept[\"meta\"];\n    			\n    			return concept.meta.deleteConcept ? null : validConcept;\n    		});\n    		\n    		conceptsToImport = $.grep(conceptsToImport,function(n){ return(n); });\n    		\n    		return conceptsToImport;\n    	},\n    	\n        actions :\n        {\n    		importFlatFile : function(members)\n    		{\n    			var _this = this;\n    			var membersArray = members.split(\'\\n\');\n    			\n    			var idArray = membersArray.map(function(refCompId)\n    			{\n    				if (refCompId !== \"\")\n    				{\n    					return refCompId;\n    				}\n    			});\n    			\n    			idArray = $.grep(idArray,function(n){ return(n); });\n\n    			var loginController = this.get(\'controllers.login\');\n    			var user = loginController.user;\n    			\n    			this.set(\"getConceptDataInProgress\",true);\n\n    			var defaultMemberModuleId = $(\'#newRefsetModuleId\').val();\n    			\n    			var membersData = membersAdapter.findList(user,idArray).then(function(result)\n    			{\n    				var membersData2;\n    				\n    				if (typeof result.meta.errorInfo === \"undefined\")\n    				{\n    					var conceptData = result.content.concepts;\n    					\n    					membersData2 = idArray.map(function(refCompId)\n    					{\n    						var member = {};\n    						\n    						member.referencedComponentId = refCompId;\n    						member.moduleId = defaultMemberModuleId;\n    						member.meta = {};\n    						\n    						if (conceptData[refCompId] !== null)\n    						{\n    							member.active 						= true;\n    							member.meta.conceptActive 			= conceptData[refCompId].active;\n    							member.meta.conceptEffectiveTime 	= conceptData[refCompId].effectiveTime;\n    							member.meta.conceptModuleId 		= conceptData[refCompId].moduleId;\n    							member.meta.description				= conceptData[refCompId].label;\n    							member.meta.found 					= true;\n    							member.meta.disabled				= !conceptData[refCompId].active;\n    						}\n    						else\n    						{\n    							member.active 						= false;\n    							member.meta.conceptActive 			= false;\n    							member.meta.description				= \'concept not found\';\n    							member.meta.found 					= false;\n    							member.meta.disabled				= true;\n    						}\n    						\n    						return member;\n    					});	\n\n    					_this.set(\"importError\",null);\n    					_this.model.setObjects(membersData2);\n    				}\n    				else\n    				{\n    					Ember.Logger.log(result.error);\n    					_this.set(\"importError\",result.error);\n    				}\n\n    				_this.set(\"getConceptDataInProgress\",false);\n    				return membersData2;\n    			});\n    		},\n\n        }\n    });\n  });//# sourceURL=refset/controllers/refsets/upload.js");

;eval("define(\"refset/controllers/utilities\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n\n    	deserialiseURLString: function(p)\n    	{\n    		var ret = {};\n    		\n    		if (p !== null)\n    		{\n    			var seg = p.replace(/^\\?/,\'\').split(\'&\');\n    		    var len = seg.length, i = 0;\n    			for (;i<len;i++) \n    			{\n    				if (!seg[i]) { continue; }\n    				var s = seg[i].split(\'=\');\n    				var v = this.urldecode(s[1]);\n    				ret[s[0]] = /^\\[^0]d+$/.test(v) ? Math.ceil(v) : v == \"null\" ? null : v; // If our value is an integer value then force it to be numeric rather than a string\n    			}\n    		}\n    		return ret;\n    	},\n    	\n    	urldecode : function(str) \n    	{\n    		return decodeURIComponent((str+\'\').replace(/\\+/g, \'%20\'));\n    	},\n    	\n    	serialiseObject : function(object)\n    	{\n    		var URLSerialisedData = \"\";\n    		\n    		for (var key in object)\n    		{\n    			if (object.hasOwnProperty(key) && key !== \"toString\")\n    			{\n    				if (URLSerialisedData !== \"\") \n    			    {\n    			    	URLSerialisedData += \"&\";\n    			    }\n    			    \n    			    URLSerialisedData += key + \"=\" + object[key];\n    			}\n    		}\n    		\n    		return URLSerialisedData;\n    	},\n    	\n    	storeDataInSessionStore : function(key,data)\n    	{\n    		var URLSerialisedData = JSON.stringify(data);\n    		sessionStoreManager.setSessionVar(key,URLSerialisedData);		\n    	},\n    	\n    	getDataFromSessionStore : function(key)\n    	{\n    		var returnObj = {};\n    		\n    		var storedData = sessionStoreManager.getSessionVar(key);\n\n    		if (typeof storedData !== \"undefined\")\n    		{\n    			try\n    			{\n    				returnObj.data 		= JSON.parse(storedData);\n    				returnObj.status 	= \'ok\';\n    			}\n    			catch(e)\n    			{\n    				returnObj.status 	= \'error\';				\n    			}\n    		}\n    		else\n    		{\n    			returnObj.status = \'error\';\n    		}\n    			\n    		return returnObj;\n    	},\n    });\n  });//# sourceURL=refset/controllers/utilities.js");

;eval("define(\"refset/helpers/code-to-language\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.makeBoundHelper(function(value)\n    {\n    	switch (value)\n    	{\n    		case \"en_US\" : return \"International English\"; \n    	}\n    });\n  });//# sourceURL=refset/helpers/code-to-language.js");

;eval("define(\"refset/helpers/date-format\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.makeBoundHelper(function(date)\n    {\n    	var theDate = new Date(date);\n    	\n    	if (theDate instanceof Date && !isNaN(theDate.valueOf()))\n    	{\n    		return $.formatDateTime(\'MM dd, yy\', theDate);		\n    	}\n    	else\n    	{\n    		return \'undefined\';\n    	}\n    });\n  });//# sourceURL=refset/helpers/date-format.js");

;eval("define(\"refset/helpers/date-time-format\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.makeBoundHelper(function(date)\n    {\n    	var theDate = new Date(date);\n    	\n    	if (theDate instanceof Date && !isNaN(theDate.valueOf()))\n    	{\n    		return $.formatDateTime(\'hh:ii - MM dd, yy\', theDate);		\n    	}\n    	else\n    	{\n    		return \'undefined\';\n    	}\n    });\n  });//# sourceURL=refset/helpers/date-time-format.js");

;eval("define(\"refset/helpers/snomed-id-to-label\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.makeBoundHelper(function(value,concepts)\n    {\n    	if (typeof value !== \"undefined\" && typeof concepts !== \"undefined\")\n    	{\n    		if (typeof concepts[value] !== \"undefined\")\n    		{\n    			return concepts[value].replace(/ *\\([^)]*\\) */g, \"\");\n    		}\n    		else\n    		{\n    			return value + \' not found\';\n    		}\n    	}\n    });\n  });//# sourceURL=refset/helpers/snomed-id-to-label.js");

;eval("define(\"refset/helpers/yes-no-format\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.makeBoundHelper(function(value)\n    {\n    	return value ? \'Yes\' : \'No\';\n    });\n  });//# sourceURL=refset/helpers/yes-no-format.js");

;eval("define(\"refset/models/simple-refset-member\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Object.extend({\n    	id:	null,\n    	moduleId: RefsetENV.APP.defaultSnomedTypes.moduleType,\n    	referencedComponentId: null,\n    	description: null,\n    	effectiveTime : null,\n    	active : true\n    });\n  });//# sourceURL=refset/models/simple-refset-member.js");

;eval("define(\"refset/router\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: RefsetENV.locationType\n    });\n\n    Router.map(function() {\n    	  this.route(\"dashboard\",{path:\'/\'});\n    	  \n    	  this.resource(\"refsets\", function(){\n    		  this.route(\"refset\", {path:\':id\'});\n    		  this.route(\"new\");\n    	  });\n\n    	  this.route(\"news\");\n    	  this.route(\"privacy-statement\");\n    	  this.route(\"cookie-policy\");\n    	  this.route(\"accessibility\");\n    	  this.route(\"terms-and-conditions\");\n    	  this.route(\"site-map\");\n    	  \n    	  //this.route(\'catchall\', {path: \'/*wildcard\'});\n    });\n\n    Ember.Route.reopen({\n    	  getParentRoute: function(){\n    	    var route = this;\n    	    var handlerInfos = route.router.router.currentHandlerInfos;\n    	    var parent, current;\n\n    	    for (var i=0, l=handlerInfos.length; i<l; i++) {\n    	      current = handlerInfos[i].handler;\n    	      if((current.routeName === route.routeName)||(current.routeName.match(/./) && current.routeName.split(\'.\')[1] === route.routeName )){\n    	        return parent.routeName;\n    	      }\n    	      parent = current;\n    	    }\n    	  }\n    	});\n    	\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=refset/router.js");

;eval("define(\"refset/routes/accessibility\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n       model: function() {\n    	   return $.get(\"assets/static-content/accessibility.html\");\n       }\n     });\n  });//# sourceURL=refset/routes/accessibility.js");

;eval("define(\"refset/routes/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n\n       model: function(){\n           return this.controllerFor(\'data\').initialiseAppData().then(function(){\n               return true;\n           });\n       },\n           \n    });\n  });//# sourceURL=refset/routes/application.js");

;eval("define(\"refset/routes/cookie-policy\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n       model: function() {\n    	   return $.get(\"assets/static-content/cookie-policy.html\");\n       }\n     });\n  });//# sourceURL=refset/routes/cookie-policy.js");

;eval("define(\"refset/routes/dashboard\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n\n    	setupController: function(controller)\n    	{\n    		controller.initModel();\n    	},\n    	\n    });\n  });//# sourceURL=refset/routes/dashboard.js");

;eval("define(\"refset/routes/news\", \n  [\"refset/controllers/news\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NewsController = __dependency1__[\"default\"];\n\n    var newsController = NewsController.create();\n\n    __exports__[\"default\"] = Ember.Route.extend({\n    	   model: function() \n    	   {\n    		   return  newsController.model;\n    	   }\n     });\n  });//# sourceURL=refset/routes/news.js");

;eval("define(\"refset/routes/privacy-statement\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n       model: function() {\n    	   return $.get(\"assets/static-content/privacy-statement.html\");\n       }\n     });\n  });//# sourceURL=refset/routes/privacy-statement.js");

;eval("define(\"refset/routes/refsets/index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n    	\n    	setupController: function(controller)\n    	{\n    		controller.initModel();\n    	},\n\n    });\n  });//# sourceURL=refset/routes/refsets/index.js");

;eval("define(\"refset/routes/refsets/new\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n    	\n    	beforeModel : function()\n    	{\n    		Ember.Logger.log(\"routes.refsets.new:beforeModel\");\n    		this.controllerFor(\'refsets.new\').createEmptyRefset();\n    	},\n    /*\n    	model: function() \n    	{\n    		var newRefsetController 	= this.controllerFor(\'refsets.new\');\n    		var uploadRefsetController 	= this.controllerFor(\'refsets.upload\');\n\n    		return Ember.RSVP.hash({\n    			refset 					: newRefsetController.model,\n    			members 				: uploadRefsetController.model,\n    			doImportPublishedRefset	: newRefsetController.doImportPublishedRefset,\n    			doImportMembers 		: newRefsetController.doImportMembers,			\n    		});\n    	},\n    */\n    	actions :\n    	{\n    		initRefsetImport : function()\n    		{\n    			var newRefsetController = this.controllerFor(\'refsets.new\');\n    			newRefsetController.create(this.refset);\n    		},\n    	\n    		abortDataRequest : function(resourceType)\n    		{\n    			Ember.Logger.log(\"routes.refsets.new:actions:abortDataRequest (resourceType)\",resourceType);\n    			// Depends what we are doing here... getting member data or saving the refset\n    		},	\n    	},	\n     });\n  });//# sourceURL=refset/routes/refsets/new.js");

;eval("define(\"refset/routes/refsets/refset\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n            		\n    	beforeModel : function(params)\n    	{\n    		this.controllerFor(\'refsets/refset\').initModel(params);\n    	},\n\n    });\n  });//# sourceURL=refset/routes/refsets/refset.js");

;eval("define(\"refset/routes/site-map\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n       model: function() {\n         return \'site map goes here...\';\n       }\n     });\n  });//# sourceURL=refset/routes/site-map.js");

;eval("define(\"refset/routes/terms-and-conditions\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n       model: function() {\n    	   return $.get(\"assets/static-content/terms-and-conditions.html\");\n       }\n     });\n  });//# sourceURL=refset/routes/terms-and-conditions.js");

;eval("define(\"refset/templates/accessibility\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      \n    });\n  });//# sourceURL=refset/templates/accessibility.js");

;eval("define(\"refset/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"IHTSDO logo\");\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n				<a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"logout\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Logout</a>\\n				\");\n      stack1 = helpers[\'if\'].call(depth0, \"showLogoutTimer\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n			\");\n      return buffer;\n      }\n    function program4(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(escapeExpression((helper = helpers[\'bs-progress\'] || (depth0 && depth0[\'bs-progress\']),options={hash:{\n        \'progressBinding\': (\"logoutProgressDisplay\"),\n        \'type\': (\"danger\"),\n        \'stripped\': (\"true\")\n      },hashTypes:{\'progressBinding\': \"STRING\",\'type\': \"STRING\",\'stripped\': \"STRING\"},hashContexts:{\'progressBinding\': depth0,\'type\': depth0,\'stripped\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"bs-progress\", options))));\n      data.buffer.push(\" <p class=\\\"warningText\\\">Logging you out in \");\n      stack1 = helpers._triageMustache.call(depth0, \"logoutTimerDisplay\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" seconds\");\n      return buffer;\n      }\n\n    function program6(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n				<a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"showLoginForm\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Login</a> &bull;\\n				<a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"showRegistrationForm\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Register</a>\\n			\");\n      return buffer;\n      }\n\n    function program8(depth0,data) {\n      \n      \n      data.buffer.push(\"Dashboard\");\n      }\n\n    function program10(depth0,data) {\n      \n      \n      data.buffer.push(\"Refsets\");\n      }\n\n    function program12(depth0,data) {\n      \n      \n      data.buffer.push(\"News\");\n      }\n\n    function program14(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"user.givenName\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" \");\n      stack1 = helpers._triageMustache.call(depth0, \"user.surname\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      }\n\n    function program16(depth0,data) {\n      \n      \n      data.buffer.push(\"Guest\");\n      }\n\n    function program18(depth0,data) {\n      \n      \n      data.buffer.push(\"Privacy\");\n      }\n\n    function program20(depth0,data) {\n      \n      \n      data.buffer.push(\"Cookie policy\");\n      }\n\n    function program22(depth0,data) {\n      \n      \n      data.buffer.push(\"Accessibility\");\n      }\n\n    function program24(depth0,data) {\n      \n      \n      data.buffer.push(\"Terms and conditions\");\n      }\n\n    function program26(depth0,data) {\n      \n      \n      data.buffer.push(\"Site map\");\n      }\n\n      data.buffer.push(\"<div class=\\\"wrapper\\\">\\n\\n	<header>\\n		\\n		\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{\n        \'class\': (\"logo\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"dashboard\", options) : helperMissing.call(depth0, \"link-to\", \"dashboard\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n		<nav class=\\\"loginRegisterButtons\\\">\\n			\");\n      stack1 = helpers[\'if\'].call(depth0, \"user.token\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n		</nav>\\n\\n        <nav>\\n            <ul>\\n                <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"dashboard\", options) : helperMissing.call(depth0, \"link-to\", \"dashboard\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n                <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"refsets\", options) : helperMissing.call(depth0, \"link-to\", \"refsets\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n                <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"news\", options) : helperMissing.call(depth0, \"link-to\", \"news\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n                <li><span class=\\\"clrPrimary\\\">Welcome</span> \");\n      stack1 = helpers[\'if\'].call(depth0, \"user.token\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(16, program16, data),fn:self.program(14, program14, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n            </ul>\\n        </nav>\\n\\n\\n    </header>\\n\\n	<section class=\\\"content contain pageLayout\\\">\\n	\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"bs-growl-notifications\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	\\n<!---		\");\n      stack1 = helpers._triageMustache.call(depth0, \"bs-breadcrumbs\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"   --->\\n		\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" \\n\\n		\");\n      data.buffer.push(escapeExpression((helper = helpers.outlet || (depth0 && depth0.outlet),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"modal\", options) : helperMissing.call(depth0, \"outlet\", \"modal\", options))));\n      data.buffer.push(\"\\n\\n	</section>\\n\\n	<div class=\\\"waitAnim\\\"><img src=\\\"/assets/img/ajax-loader.gif\\\"></div>\\n\\n	<footer class=\\\"pageLayout contain\\\">\\n		\\n		<hr>\\n\\n		<div class=\\\"share\\\">\\n			<span><small>Share</small></span>\\n			<ul>\\n				<li><a href=\\\"#\\\" class=\\\"linkedin\\\">linkedin</a></li>\\n				<li><a href=\\\"#\\\" class=\\\"twitter\\\">twitter</a></li>\\n				<li><a href=\\\"#\\\" class=\\\"google\\\">googleplus</a></li>\\n			</ul>\\n		</div>\\n\\n		<nav>\\n            <ul>\\n                <li><small>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"privacy-statement\", options) : helperMissing.call(depth0, \"link-to\", \"privacy-statement\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</small></li>\\n                <li><small>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"cookie-policy\", options) : helperMissing.call(depth0, \"link-to\", \"cookie-policy\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</small></li>\\n                <li><small>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(22, program22, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"accessibility\", options) : helperMissing.call(depth0, \"link-to\", \"accessibility\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</small></li>\\n                <li><small>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(24, program24, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"terms-and-conditions\", options) : helperMissing.call(depth0, \"link-to\", \"terms-and-conditions\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</small></li>\\n                <li><small>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(26, program26, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"site-map\", options) : helperMissing.call(depth0, \"link-to\", \"site-map\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</small></li>\\n                <li><small><a href=\\\"http://www.ihtsdo.org/\\\" target=\\\"_blank\\\">&copy; Copyright IHTSDO 2014</a></small></li>\\n            </ul>\\n        </nav>\\n\\n	</footer>\\n	\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/application.js");

;eval("define(\"refset/templates/components/latest-news\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n	<ul class=\\\"list-group\\\">\\n		\");\n      stack1 = helpers.each.call(depth0, \"news\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</ul>\\n\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n			<li class=\\\"list-group-item\\\">\\n				<h4>\");\n      stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</h4>\\n				<em>published:</em> \");\n      stack1 = helpers._triageMustache.call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n			</li>\\n		\");\n      return buffer;\n      }\n\n      stack1 = (helper = helpers[\'bs-panel\'] || (depth0 && depth0[\'bs-panel\']),options={hash:{\n        \'heading\': (\"Latest News\"),\n        \'type\': (\"success\"),\n        \'class\': (\"panelNoPadding\")\n      },hashTypes:{\'heading\': \"STRING\",\'type\': \"STRING\",\'class\': \"STRING\"},hashContexts:{\'heading\': depth0,\'type\': depth0,\'class\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"bs-panel\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      \n    });\n  });//# sourceURL=refset/templates/components/latest-news.js");

;eval("define(\"refset/templates/components/refsets-list\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n\\n	<ul class=\\\"list-group\\\">\\n		\");\n      stack1 = helpers.each.call(depth0, \"refsets\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</ul>\\n\\n\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n			<li class=\\\"list-group-item\\\">\\n				\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"refsets.refset\", \"id\", options) : helperMissing.call(depth0, \"link-to\", \"refsets.refset\", \"id\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n				<h4>\");\n      stack1 = helpers._triageMustache.call(depth0, \"description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</h4>\\n				<em>created on:</em> \");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-format\'] || (depth0 && depth0[\'date-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"created\", options) : helperMissing.call(depth0, \"date-format\", \"created\", options))));\n      data.buffer.push(\"<br>\\n				<em>by:</em> \");\n      stack1 = helpers._triageMustache.call(depth0, \"createdBy\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"<br>\\n				\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n			</li>\\n		\");\n      return buffer;\n      }\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"<button class=\\\"btn btn-primary right\\\">view</button>\");\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n					<em>published on:</em> \");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-format\'] || (depth0 && depth0[\'date-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"publishedDate\", options) : helperMissing.call(depth0, \"date-format\", \"publishedDate\", options))));\n      data.buffer.push(\"<br>\\n				\");\n      return buffer;\n      }\n\n      stack1 = (helper = helpers[\'bs-panel\'] || (depth0 && depth0[\'bs-panel\']),options={hash:{\n        \'heading\': (\"title\"),\n        \'type\': (\"info\"),\n        \'class\': (\"panelNoPadding\")\n      },hashTypes:{\'heading\': \"ID\",\'type\': \"STRING\",\'class\': \"STRING\"},hashContexts:{\'heading\': depth0,\'type\': depth0,\'class\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"bs-panel\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      \n    });\n  });//# sourceURL=refset/templates/components/refsets-list.js");

;eval("define(\"refset/templates/cookie-policy\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      \n    });\n  });//# sourceURL=refset/templates/cookie-policy.js");

;eval("define(\"refset/templates/dashboard\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"dashboard\\\">\\n	<div class=\\\"colMed inner\\\">\\n		\");\n      data.buffer.push(escapeExpression((helper = helpers[\'refsets-list\'] || (depth0 && depth0[\'refsets-list\']),options={hash:{\n        \'refsets\': (\"refsets\"),\n        \'title\': (\"Latest Public Refsets\")\n      },hashTypes:{\'refsets\': \"ID\",\'title\': \"STRING\"},hashContexts:{\'refsets\': depth0,\'title\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"refsets-list\", options))));\n      data.buffer.push(\"\\n	</div>\\n	\\n	<div class=\\\"colMed inner\\\">\\n		\");\n      data.buffer.push(escapeExpression((helper = helpers[\'latest-news\'] || (depth0 && depth0[\'latest-news\']),options={hash:{\n        \'news\': (\"news\")\n      },hashTypes:{\'news\': \"ID\"},hashContexts:{\'news\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"latest-news\", options))));\n      data.buffer.push(\"\\n	</div>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/dashboard.js");

;eval("define(\"refset/templates/login\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n		<p class=\\\"autoLogoutInfo\\\">You have been automatically logged out after \");\n      stack1 = helpers._triageMustache.call(depth0, \"RefsetENV.APP.loginExpiry\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" minutes of inactivity.</p>\\n	\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n		<div class=\\\"loading\\\">Logging you in, please wait...</div>\\n		\");\n      data.buffer.push(escapeExpression((helper = helpers[\'bs-progress\'] || (depth0 && depth0[\'bs-progress\']),options={hash:{\n        \'progress\': (100),\n        \'stripped\': (true),\n        \'animated\': (true)\n      },hashTypes:{\'progress\': \"INTEGER\",\'stripped\': \"BOOLEAN\",\'animated\': \"BOOLEAN\"},hashContexts:{\'progress\': depth0,\'stripped\': depth0,\'animated\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"bs-progress\", options))));\n      data.buffer.push(\"\\n	\");\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n		<div class=\\\"error\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"loginError\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</div>\\n	\");\n      return buffer;\n      }\n\n      data.buffer.push(\"<form id=\\\"loginForm\\\" class=\\\"RefsetPanel\\\" action=\\\"javascript:Refset.__container__.lookup(\'controller:login\').send(\'loginUser\')\\\">\\n	\\n	\");\n      stack1 = helpers[\'if\'].call(depth0, \"autoLoggedOut\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	\\n	<p>\\n		For access to the full range to tools you will need to login.\\n		You may continue as a guest to view only public refsets.\\n	</p>\\n	\\n	\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"username\"),\n        \'type\': (\"text\"),\n        \'placeholder\': (\"Username\")\n      },hashTypes:{\'value\': \"ID\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n	\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"password\"),\n        \'type\': (\"password\"),\n        \'id\': (\"loginPassword\"),\n        \'placeholder\': (\"Password\")\n      },hashTypes:{\'value\': \"ID\",\'type\': \"STRING\",\'id\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'type\': depth0,\'id\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n	\\n	\");\n      stack1 = helpers[\'if\'].call(depth0, \"loginInProgress\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	\\n	\");\n      stack1 = helpers[\'if\'].call(depth0, \"loginError\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	\\n	<button type=\\\"submit\\\" style=\\\"display:none\\\">Submit</button>\\n	\\n	<p class=\\\"forgetPasswordLink\\\"><a \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'href\': (\"RefsetENV.APP.passwordResetURL\")\n      },hashTypes:{\'href\': \"STRING\"},hashContexts:{\'href\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" target=\\\"_blank\\\">I\'ve forgotten my password</a></p>\\n</form>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/login.js");

;eval("define(\"refset/templates/logout-alert\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      data.buffer.push(\"<div id=\\\"logoutWarningModel\\\">\\n	<p class=\\\"heading\\\">Due to inactivity, you will be automatically logged out in</p>\\n\\n	<p class=\\\"timer\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"logoutTimerDisplay\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" seconds</p>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/logout-alert.js");

;eval("define(\"refset/templates/news\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"dashboard\\\">\\n	<div class=\\\"colMed inner\\\">\\n		\");\n      data.buffer.push(escapeExpression((helper = helpers[\'latest-news\'] || (depth0 && depth0[\'latest-news\']),options={hash:{\n        \'news\': (\"model\")\n      },hashTypes:{\'news\': \"ID\"},hashContexts:{\'news\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"latest-news\", options))));\n      data.buffer.push(\"\\n	</div>\\n	<div class=\\\"colMed inner\\\">\\n		Selected news article will show here...\\n	</div>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/news.js");

;eval("define(\"refset/templates/privacy-statement\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      \n    });\n  });//# sourceURL=refset/templates/privacy-statement.js");

;eval("define(\"refset/templates/refsets\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"Browse Refsets\");\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"<li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"refsets.new\", options) : helperMissing.call(depth0, \"link-to\", \"refsets.new\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\");\n      return buffer;\n      }\n    function program4(depth0,data) {\n      \n      \n      data.buffer.push(\"New Refset\");\n      }\n\n      data.buffer.push(\"<div id=\\\"toolsMenu\\\">\\n 	<ul>\\n	 	 <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"refsets\", options) : helperMissing.call(depth0, \"link-to\", \"refsets\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n		 \");\n      stack1 = helpers[\'if\'].call(depth0, \"user.token\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	 </ul>\\n</div>\\n \\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/refsets.js");

;eval("define(\"refset/templates/refsets/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"dashboard\\\">\\n	<div class=\\\"colMed inner\\\">\\n		\");\n      data.buffer.push(escapeExpression((helper = helpers[\'refsets-list\'] || (depth0 && depth0[\'refsets-list\']),options={hash:{\n        \'refsets\': (\"published\"),\n        \'title\': (\"Published Refsets\")\n      },hashTypes:{\'refsets\': \"ID\",\'title\': \"STRING\"},hashContexts:{\'refsets\': depth0,\'title\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"refsets-list\", options))));\n      data.buffer.push(\"\\n	</div>\\n\\n	<div class=\\\"colMed inner\\\">\\n		\");\n      data.buffer.push(escapeExpression((helper = helpers[\'refsets-list\'] || (depth0 && depth0[\'refsets-list\']),options={hash:{\n        \'refsets\': (\"unpublished\"),\n        \'title\': (\"Unpublished Refsets\")\n      },hashTypes:{\'refsets\': \"ID\",\'title\': \"STRING\"},hashContexts:{\'refsets\': depth0,\'title\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"refsets-list\", options))));\n      data.buffer.push(\"\\n	</div>\\n</div>\\n<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"refresh\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-default\\\">Refresh</button>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/refsets/index.js");

;eval("define(\"refset/templates/refsets/new\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n				<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clearImportList\", \"id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-default\\\">Clear import list</button>\\n			\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"		\\n				<h2>Importing member file</h2>\\n				<img src=\\\"assets/img/googleballs-animated.gif\\\">\\n				<p><b>Please wait...</b></p>\\n			\");\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n				\");\n      stack1 = helpers[\'if\'].call(depth0, \"importError\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n			\");\n      return buffer;\n      }\n    function program6(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n					<h2>Importing failed</h2>\\n					<p><b\");\n      stack1 = helpers._triageMustache.call(depth0, \"importError\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</b></p>\\n				\");\n      return buffer;\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n	\");\n      stack1 = helpers.unless.call(depth0, \"importError\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n    function program9(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n		\");\n      stack1 = helpers[\'if\'].call(depth0, \"potentialMembersToImport\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	\");\n      return buffer;\n      }\n    function program10(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n		    <div class=\\\"panel panel-info ember-view fade in panelNoPadding\\\">\\n		        <div class=\\\"panel-heading accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" data-target=\\\"#collapseTwo\\\">\\n		             <h4 class=\\\"panel-title\\\">Review Members to import(\");\n      stack1 = helpers._triageMustache.call(depth0, \"potentialMembersToImport.length\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\")</h4>\\n		        </div>\\n		        <div class=\\\"panel-collapse collapse in\\\">\\n		            <div id=\\\"collapseTwo\\\" class=\\\"panel-body\\\">\\n						<ul class=\\\"list-group checkboxList\\\">\\n								\");\n      stack1 = helpers.each.call(depth0, \"potentialMembersToImport\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n						</ul>\\n					</div>\\n				</div>\\n			</div>\\n		\");\n      return buffer;\n      }\n    function program11(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n									<li \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":list-group-item meta.conceptActive::inactiveConcept meta.deleteConcept:deleteConcept\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n\\n										<label class=\\\"right\\\">SCTID <span>\");\n      stack1 = helpers._triageMustache.call(depth0, \"referencedComponentId\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span></label>\\n										<p class=\\\"description\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"meta.description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>									\\n\\n										\");\n      stack1 = helpers[\'if\'].call(depth0, \"meta.found\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n										\");\n      stack1 = helpers.unless.call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n									</li>\\n								\");\n      return buffer;\n      }\n    function program12(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n											<label>Import as active\");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"toggle-switch\", {hash:{\n        \'checkedBinding\': (\"active\"),\n        \'value\': (\"id\")\n      },hashTypes:{\'checkedBinding\': \"STRING\",\'value\': \"STRING\"},hashContexts:{\'checkedBinding\': depth0,\'value\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"</label>\\n\\n											<label>Module:\\n												<span>\\n													\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(15, program15, data),fn:self.program(13, program13, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n									 			</span>\\n											</label>\\n												\\n											<label>Concept effective time: <span>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-time-format\'] || (depth0 && depth0[\'date-time-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"meta.conceptEffectiveTime\", options) : helperMissing.call(depth0, \"date-time-format\", \"meta.conceptEffectiveTime\", options))));\n      data.buffer.push(\"</span></label>\\n											\");\n      stack1 = helpers.unless.call(depth0, \"meta.conceptActive\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n										\");\n      return buffer;\n      }\n    function program13(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n														\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-id-to-label\'] || (depth0 && depth0[\'snomed-id-to-label\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"ID\",\"ID\"],data:data},helper ? helper.call(depth0, \"moduleId\", \"outerView.controller.moduleTypes\", options) : helperMissing.call(depth0, \"snomed-id-to-label\", \"moduleId\", \"outerView.controller.moduleTypes\", options))));\n      data.buffer.push(\"\\n													\");\n      return buffer;\n      }\n\n    function program15(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n														\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'valueBinding\': (\"moduleId\"),\n        \'dataType\': (\"moduleTypesArray\")\n      },hashTypes:{\'valueBinding\': \"STRING\",\'dataType\': \"STRING\"},hashContexts:{\'valueBinding\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n													 \");\n      return buffer;\n      }\n\n    function program17(depth0,data) {\n      \n      \n      data.buffer.push(\"<label class=\\\"warning\\\">Note: This concept is INACTIVE</label>\");\n      }\n\n    function program19(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"<label class=\\\"right clearRight\\\">Import this concept \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"toggle-switch-inverted\", {hash:{\n        \'checkedBinding\': (\"meta.deleteConcept\"),\n        \'value\': (\"id\")\n      },hashTypes:{\'checkedBinding\': \"STRING\",\'value\': \"STRING\"},hashContexts:{\'checkedBinding\': depth0,\'value\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"</label>\");\n      return buffer;\n      }\n\n      data.buffer.push(\"<h1>Create New Refset</h1>\\n\\n<div class=\\\"panel panel-info ember-view fade in panelNoPadding\\\">\\n    <div class=\\\"panel-heading accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" data-target=\\\"#refsetHeader\\\">\\n         <h4 class=\\\"panel-title\\\">Refset Header</h4>\\n    </div>\\n    <div class=\\\"panel-collapse collapse in\\\">\\n        <div id=\\\"refsetHeader\\\" class=\\\"panel-body\\\">\\n\\n			<label>Are you importing a Published Refset? \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"toggle-switch-inverted\", {hash:{\n        \'checkedBinding\': (\"disablePublishedFormFields\")\n      },hashTypes:{\'checkedBinding\': \"STRING\"},hashContexts:{\'checkedBinding\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"</label>\\n\\n			<form id=\\\"refsetEditForm\\\" class=\\\"myForm\\\">\\n				\\n				<table width=\\\"100%>\\n					\\n					<tr>\\n						<td class=\\\"content\\\" colspan=\\\"4\\\">\\n							<label class=\\\"control-label\\\" for=\\\"description\\\">Refset Description</label>\\n							\");\n      data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{\n        \'value\': (\"description\")\n      },hashTypes:{\'value\': \"ID\"},hashContexts:{\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n      data.buffer.push(\"\\n						</td>\\n					</tr>\\n\\n					<tr>\\n						<td class=\\\"label\\\">Language</td>\\n						<td class=\\\"content\\\">\\n							\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'valueBinding\': (\"languageCode\"),\n        \'dataType\': (\"languagesArray\")\n      },hashTypes:{\'valueBinding\': \"STRING\",\'dataType\': \"STRING\"},hashContexts:{\'valueBinding\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n			  			</td>\\n						<td class=\\\"label\\\">Published Date</td><td class=\\\"content\\\">				\\n						\");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Em.TextField\", {hash:{\n        \'disabled\': (\"disablePublishedFormFields\"),\n        \'placeholder\': (\"Not Applicable\"),\n        \'valueBinding\': (\"meta.publishedDateInput\"),\n        \'data-provide\': (\"datepicker\"),\n        \'data-date-format\': (\"MM d, yyyy\"),\n        \'data-date-clear-btn\': (\"true\"),\n        \'data-date-autoclose\': (\"true\")\n      },hashTypes:{\'disabled\': \"ID\",\'placeholder\': \"STRING\",\'valueBinding\': \"STRING\",\'data-provide\': \"STRING\",\'data-date-format\': \"STRING\",\'data-date-clear-btn\': \"STRING\",\'data-date-autoclose\': \"STRING\"},hashContexts:{\'disabled\': depth0,\'placeholder\': depth0,\'valueBinding\': depth0,\'data-provide\': depth0,\'data-date-format\': depth0,\'data-date-clear-btn\': depth0,\'data-date-autoclose\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"									\\n						</td>\\n					</tr>\\n\\n					<tr>\\n						<td class=\\\"label\\\">Refset Type</td>\\n						<td class=\\\"content\\\">\\n							\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'valueBinding\': (\"typeId\"),\n        \'dataType\': (\"refsetTypesArray\")\n      },hashTypes:{\'valueBinding\': \"STRING\",\'dataType\': \"STRING\"},hashContexts:{\'valueBinding\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n						</td>\\n						<td class=\\\"label\\\">Refset Members Type</td>\\n						<td class=\\\"content\\\">\\n							\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'valueBinding\': (\"componentTypeId\"),\n        \'dataType\': (\"componentTypesArray\")\n      },hashTypes:{\'valueBinding\': \"STRING\",\'dataType\': \"STRING\"},hashContexts:{\'valueBinding\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n			  			</td>\\n					</tr>\\n\\n					<tr>\\n						<td class=\\\"label\\\">Creation Date</td>\\n						<td class=\\\"content\\\">\\n							\");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Em.TextField\", {hash:{\n        \'disabled\': (\"disablePublishedFormFields\"),\n        \'placeholder\': (\"Auto generated\"),\n        \'valueBinding\': (\"meta.createdDateInput\"),\n        \'data-provide\': (\"datepicker\"),\n        \'data-date-format\': (\"MM d, yyyy\"),\n        \'data-date-clear-btn\': (\"true\"),\n        \'data-date-autoclose\': (\"true\")\n      },hashTypes:{\'disabled\': \"ID\",\'placeholder\': \"STRING\",\'valueBinding\': \"STRING\",\'data-provide\': \"STRING\",\'data-date-format\': \"STRING\",\'data-date-clear-btn\': \"STRING\",\'data-date-autoclose\': \"STRING\"},hashContexts:{\'disabled\': depth0,\'placeholder\': depth0,\'valueBinding\': depth0,\'data-provide\': depth0,\'data-date-format\': depth0,\'data-date-clear-btn\': depth0,\'data-date-autoclose\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\n						</td>\\n						<td class=\\\"label\\\">Module</td><td class=\\\"content\\\">\\n							\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'valueBinding\': (\"moduleId\"),\n        \'dataType\': (\"moduleTypesArray\"),\n        \'id\': (\"newRefsetModuleId\")\n      },hashTypes:{\'valueBinding\': \"STRING\",\'dataType\': \"STRING\",\'id\': \"STRING\"},hashContexts:{\'valueBinding\': depth0,\'dataType\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n			  			</td>\\n					</tr>\\n					<tr>\\n						<td class=\\\"label\\\">SCTID</td><td class=\\\"content\\\" colspan=3>\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"text\"),\n        \'value\': (\"id\"),\n        \'disabled\': (\"disablePublishedFormFields\"),\n        \'placeholder\': (\"Enter refset SCTID here\")\n      },hashTypes:{\'type\': \"STRING\",\'value\': \"ID\",\'disabled\': \"ID\",\'placeholder\': \"STRING\"},hashContexts:{\'type\': depth0,\'value\': depth0,\'disabled\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</td>\\n					</tr>\\n				\\n				</table>\\n			</form>\\n		</div>\\n	</div>\\n</div>\\n\\n<!-- This requires vendore/my_utilities/drag_drop_file_upload.js --->\\n<div class=\\\"panel panel-info ember-view fade in\\\">\\n    <div class=\\\"panel-heading accordion-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" data-target=\\\"#refsetMembers\\\">\\n         <h4 class=\\\"panel-title\\\">Import Members</h4>\\n    </div>\\n    <div class=\\\"panel-collapse collapse in\\\">\\n        <div id=\\\"refsetMembers\\\" class=\\\"panel-body collapse\\\">\\n		            	\\n			<b>Import Members (flat file)</b>\\n			<p>To import members from a flat-file of concept IDs, either use the browse button to locate your file, or drag a file below.</p>\\n		\\n			<input type=\\\"file\\\" id=\\\"refsetUploadFileInput\\\" />\\n		\\n			<div id=\\\"fileUploadDropZone\\\" class=\\\"fileUploadDropZone\\\"><span id=\\\"droptext\\\">Drop files here</span></div>\\n			\\n			<p><a href=\\\"/assets/temp/sample_refset.txt\\\" target=\\\"_blank\\\">Click here to download the latest sample refset file which you can use in the form above</a></p>\\n		\\n			\");\n      stack1 = helpers[\'if\'].call(depth0, \"potentialMembersToImport\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n						\\n			\");\n      stack1 = helpers[\'if\'].call(depth0, \"getConceptDataInProgress\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n		</div>\\n	</div>\\n</div>\\n \\n\");\n      stack1 = helpers.unless.call(depth0, \"getConceptDataInProgress\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clearForm\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-default\\\">Clear Form</button>\\n<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"initRefsetImport\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-primary right\\\">Create Refset</button>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/refsets/new.js");

;eval("define(\"refset/templates/refsets/refset\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n\\n	\");\n      stack1 = helpers[\'if\'].call(depth0, \"unauthorised\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n	\");\n      stack1 = helpers[\'if\'].call(depth0, \"notFound\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n	\");\n      stack1 = helpers[\'if\'].call(depth0, \"commsError\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	\\n\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n		You need to <a href=\\\"#\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"showLoginForm\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">login</a> to access this refset\\n	\");\n      return buffer;\n      }\n\n    function program4(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n		We cannot find the Refset you are looking for\\n	\");\n      }\n\n    function program6(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n		We were unable to retrieve the Refset from the server\\n	\");\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n\\n	<div class=\\\"dashboard\\\">\\n	    <div class=\\\"panel panel-info ember-view fade in panelNoPadding\\\">\\n	        <div class=\\\"panel-heading accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" data-target=\\\"#collapseOne\\\">\\n	             <h4 class=\\\"panel-title\\\">Refset Header</h4>\\n	        </div>\\n	        <div class=\\\"panel-collapse collapse in\\\">\\n	            <div id=\\\"collapseOne\\\" class=\\\"panel-body\\\">\\n	   				<form id=\\\"refsetEditForm\\\" class=\\\"myForm\\\">\\n						\\n						<table width=\\\"100%>\\n							\\n							<tr>\\n								<td class=\\\"content\\\" colspan=\\\"4\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{\n        \'value\': (\"description\")\n      },hashTypes:{\'value\': \"ID\"},hashContexts:{\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n      data.buffer.push(\"</td>\\n							</tr>\\n	\\n							<tr>\\n								<td class=\\\"label\\\">Language</td><td class=\\\"content\\\">\\n									\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(11, program11, data),fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n								</td>\\n								<td class=\\\"label\\\">Published</td><td class=\\\"content\\\">				\\n								\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(15, program15, data),fn:self.program(13, program13, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"								\\n								</td>\\n							</tr>\\n		\\n							<tr>\\n								<td class=\\\"label\\\">Refset Type</td><td class=\\\"content\\\">\\n									\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(19, program19, data),fn:self.program(17, program17, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n								</td>\\n								<td class=\\\"label\\\">Refset Members Type</td><td class=\\\"content\\\">\\n									\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(23, program23, data),fn:self.program(21, program21, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"		\\n								</td>\\n							</tr>\\n		\\n							<tr>\\n								<td class=\\\"label\\\">Created</td><td class=\\\"content\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-time-format\'] || (depth0 && depth0[\'date-time-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"created\", options) : helperMissing.call(depth0, \"date-time-format\", \"created\", options))));\n      data.buffer.push(\"</td>\\n								<td class=\\\"label\\\">Module</td><td class=\\\"content\\\">\\n									\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n								</td>\\n							</tr>\\n		\\n							<tr>\\n								<td class=\\\"label\\\">Last Updated</td><td class=\\\"content\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-time-format\'] || (depth0 && depth0[\'date-time-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"modifiedDate\", options) : helperMissing.call(depth0, \"date-time-format\", \"modifiedDate\", options))));\n      data.buffer.push(\"</td>\\n								<td class=\\\"label\\\">Last Updated by</td><td class=\\\"content\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"modifiedBy\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\\n							</tr>\\n\\n							<tr>\\n								<td class=\\\"label\\\">SCTID</td><td class=\\\"content\\\">\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(29, program29, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\\n								<td class=\\\"label\\\">UUID</td><td class=\\\"content\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\\n							</tr>\\n\\n						</table>\\n					</form>\\n					</div>\\n				</div>\\n			</div>\\n\\n		    <div class=\\\"panel panel-info ember-view fade in panelNoPadding\\\">\\n		        <div class=\\\"panel-heading accordion-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" data-target=\\\"#collapseMembers\\\">\\n		             <h4 class=\\\"panel-title\\\">Members (\");\n      stack1 = helpers._triageMustache.call(depth0, \"members.length\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\")</h4>\\n		        </div>\\n		        <div class=\\\"panel-collapse collapse in\\\">\\n		            <div id=\\\"collapseMembers\\\" class=\\\"panel-body collapse\\\">\\n						<ul class=\\\"list-group checkboxList\\\">\\n							\");\n      stack1 = helpers[\'if\'].call(depth0, \"members\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(45, program45, data),fn:self.program(31, program31, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n						</ul>\\n					</div>\\n				</div>\\n			</div>\\n			\\n			<!-- This requires vendore/my_utilities/drag_drop_file_upload.js --->\\n			<div class=\\\"panel panel-info ember-view fade in\\\">\\n			    <div class=\\\"panel-heading accordion-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" data-target=\\\"#importMembersForm\\\">\\n			         <h4 class=\\\"panel-title\\\">Import Members</h4>\\n			    </div>\\n			    <div class=\\\"panel-collapse collapse in\\\">\\n			        <div id=\\\"importMembersForm\\\" class=\\\"panel-body collapse\\\">\\n					            	\\n						<b>Import Members (flat file)</b>\\n						<p>To import members from a flat-file of concept IDs, either use the browse button to locate your file, or drag a file below.</p>\\n					\\n						<input type=\\\"file\\\" id=\\\"refsetUploadFileInput\\\" />\\n					\\n						<div id=\\\"fileUploadDropZone\\\" class=\\\"fileUploadDropZone\\\"><span id=\\\"droptext\\\">Drop files here</span></div>\\n						\\n						<p><a href=\\\"/assets/temp/sample_refset.txt\\\" target=\\\"_blank\\\">Click here to download the latest sample refset file which you can use in the form above</a></p>\\n						\\n						\");\n      stack1 = helpers[\'if\'].call(depth0, \"potentialMembersToImport\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(47, program47, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n						\\n						\");\n      stack1 = helpers[\'if\'].call(depth0, \"getConceptDataInProgress\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(51, program51, data),fn:self.program(49, program49, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n					</div>\\n				</div>\\n			</div>\\n \\n				\");\n      stack1 = helpers.unless.call(depth0, \"getConceptDataInProgress\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(54, program54, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n			\");\n      stack1 = helpers.unless.call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(67, program67, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n			<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"exportRefset\", \"id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-default\\\">Export</button>\\n			<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"updateRefset\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-primary right\\\">Save changes</button>\\n		\\n	</div>\\n\");\n      return buffer;\n      }\n    function program9(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'code-to-language\'] || (depth0 && depth0[\'code-to-language\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"languageCode\", options) : helperMissing.call(depth0, \"code-to-language\", \"languageCode\", options))));\n      data.buffer.push(\"\\n									\");\n      return buffer;\n      }\n\n    function program11(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'value\': (\"languageCode\"),\n        \'dataType\': (\"languagesArray\")\n      },hashTypes:{\'value\': \"ID\",\'dataType\': \"STRING\"},hashContexts:{\'value\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n									\");\n      return buffer;\n      }\n\n    function program13(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n									\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-format\'] || (depth0 && depth0[\'date-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"publishedDate\", options) : helperMissing.call(depth0, \"date-format\", \"publishedDate\", options))));\n      data.buffer.push(\"\\n								\");\n      return buffer;\n      }\n\n    function program15(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n									Not yet published\\n								\");\n      }\n\n    function program17(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-id-to-label\'] || (depth0 && depth0[\'snomed-id-to-label\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"ID\",\"ID\"],data:data},helper ? helper.call(depth0, \"typeId\", \"refsetTypes\", options) : helperMissing.call(depth0, \"snomed-id-to-label\", \"typeId\", \"refsetTypes\", options))));\n      data.buffer.push(\"\\n									\");\n      return buffer;\n      }\n\n    function program19(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'value\': (\"typeId\"),\n        \'dataType\': (\"refsetTypesArray\")\n      },hashTypes:{\'value\': \"ID\",\'dataType\': \"STRING\"},hashContexts:{\'value\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n									\");\n      return buffer;\n      }\n\n    function program21(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-id-to-label\'] || (depth0 && depth0[\'snomed-id-to-label\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"ID\",\"ID\"],data:data},helper ? helper.call(depth0, \"componentTypeId\", \"componentTypes\", options) : helperMissing.call(depth0, \"snomed-id-to-label\", \"componentTypeId\", \"componentTypes\", options))));\n      data.buffer.push(\"\\n									\");\n      return buffer;\n      }\n\n    function program23(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'value\': (\"componentTypeId\"),\n        \'dataType\': (\"componentTypesArray\")\n      },hashTypes:{\'value\': \"ID\",\'dataType\': \"STRING\"},hashContexts:{\'value\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n							  		\");\n      return buffer;\n      }\n\n    function program25(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-id-to-label\'] || (depth0 && depth0[\'snomed-id-to-label\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"ID\",\"ID\"],data:data},helper ? helper.call(depth0, \"moduleId\", \"moduleTypes\", options) : helperMissing.call(depth0, \"snomed-id-to-label\", \"moduleId\", \"moduleTypes\", options))));\n      data.buffer.push(\"\\n									\");\n      return buffer;\n      }\n\n    function program27(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n										\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'value\': (\"moduleId\"),\n        \'dataType\': (\"moduleTypesArray\"),\n        \'id\': (\"newRefsetModuleId\")\n      },hashTypes:{\'value\': \"ID\",\'dataType\': \"STRING\",\'id\': \"STRING\"},hashContexts:{\'value\': depth0,\'dataType\': depth0,\'id\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n									\");\n      return buffer;\n      }\n\n    function program29(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n\n    function program31(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n								\");\n      stack1 = helpers[\'with\'].call(depth0, \"view\", \"as\", \"outerView\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(32, program32, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n							\");\n      return buffer;\n      }\n    function program32(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n								\\n									\");\n      stack1 = helpers.each.call(depth0, \"members\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(33, program33, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n								\");\n      return buffer;\n      }\n    function program33(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n										<li \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":list-group-item meta.conceptActive::inactiveConcept meta.deleteConcept:inactiveConcept\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n	\\n											<label class=\\\"right\\\">SCTID <span>\");\n      stack1 = helpers._triageMustache.call(depth0, \"referencedComponentId\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span></label>\\n											<p class=\\\"description\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"meta.description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>									\\n	\\n											\");\n      stack1 = helpers[\'if\'].call(depth0, \"meta.found\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(34, program34, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	\\n											\");\n      stack1 = helpers.unless.call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(43, program43, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n										</li>\\n									\");\n      return buffer;\n      }\n    function program34(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n												<label>Member is active\");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"toggle-switch\", {hash:{\n        \'checkedBinding\': (\"active\"),\n        \'value\': (\"id\")\n      },hashTypes:{\'checkedBinding\': \"STRING\",\'value\': \"STRING\"},hashContexts:{\'checkedBinding\': depth0,\'value\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"</label>\\n												<label>Last modified: <span>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-time-format\'] || (depth0 && depth0[\'date-time-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"modifiedDate\", options) : helperMissing.call(depth0, \"date-time-format\", \"modifiedDate\", options))));\n      data.buffer.push(\"</span></label>\\n												<label>Last modified by: <span>\");\n      stack1 = helpers._triageMustache.call(depth0, \"modifiedBy\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span></label>\\n												\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(35, program35, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n												<br>\\n												<label>Module:\\n													<span>\\n														\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(39, program39, data),fn:self.program(37, program37, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n										 			</span>\\n												</label>\\n												<label>Concept effective time: <span>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-time-format\'] || (depth0 && depth0[\'date-time-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"meta.conceptEffectiveTime\", options) : helperMissing.call(depth0, \"date-time-format\", \"meta.conceptEffectiveTime\", options))));\n      data.buffer.push(\"</span></label>\\n												\");\n      stack1 = helpers.unless.call(depth0, \"meta.conceptActive\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(41, program41, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n											\");\n      return buffer;\n      }\n    function program35(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n													<label>Published: <span>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-time-format\'] || (depth0 && depth0[\'date-time-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"effectiveTime\", options) : helperMissing.call(depth0, \"date-time-format\", \"effectiveTime\", options))));\n      data.buffer.push(\"</span></label>\\n												\");\n      return buffer;\n      }\n\n    function program37(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n															\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-id-to-label\'] || (depth0 && depth0[\'snomed-id-to-label\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"ID\",\"ID\"],data:data},helper ? helper.call(depth0, \"moduleId\", \"outerView.controller.moduleTypes\", options) : helperMissing.call(depth0, \"snomed-id-to-label\", \"moduleId\", \"outerView.controller.moduleTypes\", options))));\n      data.buffer.push(\"\\n														\");\n      return buffer;\n      }\n\n    function program39(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n															\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'valueBinding\': (\"moduleId\"),\n        \'dataType\': (\"moduleTypesArray\")\n      },hashTypes:{\'valueBinding\': \"STRING\",\'dataType\': \"STRING\"},hashContexts:{\'valueBinding\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n														 \");\n      return buffer;\n      }\n\n    function program41(depth0,data) {\n      \n      \n      data.buffer.push(\"<label class=\\\"warning\\\">This concept is INACTIVE</label>\");\n      }\n\n    function program43(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"<label class=\\\"right clearRight\\\">Delete this member \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"toggle-switch\", {hash:{\n        \'checkedBinding\': (\"meta.deleteConcept\"),\n        \'value\': (\"id\")\n      },hashTypes:{\'checkedBinding\': \"STRING\",\'value\': \"STRING\"},hashContexts:{\'checkedBinding\': depth0,\'value\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"</label>\");\n      return buffer;\n      }\n\n    function program45(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n								<li class=\'list-group-item\'>\\n									Your refset does not have any members yet...\\n								</li>\\n							\");\n      }\n\n    function program47(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n							<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clearImportList\", \"id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-default\\\">Clear import list</button>\\n						\");\n      return buffer;\n      }\n\n    function program49(depth0,data) {\n      \n      \n      data.buffer.push(\"		\\n							<h2>Importing member file</h2>\\n							<img src=\\\"assets/img/googleballs-animated.gif\\\">\\n							<p><b>Please wait...</b></p>\\n						\");\n      }\n\n    function program51(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n							\");\n      stack1 = helpers[\'if\'].call(depth0, \"importError\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(52, program52, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n						\");\n      return buffer;\n      }\n    function program52(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n								<h2>Importing failed</h2>\\n								<p><b\");\n      stack1 = helpers._triageMustache.call(depth0, \"importError\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</b></p>\\n							\");\n      return buffer;\n      }\n\n    function program54(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n					\");\n      stack1 = helpers.unless.call(depth0, \"importError\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(55, program55, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n				\");\n      return buffer;\n      }\n    function program55(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n						\");\n      stack1 = helpers[\'if\'].call(depth0, \"potentialMembersToImport\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(56, program56, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n					\");\n      return buffer;\n      }\n    function program56(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n						    <div class=\\\"panel panel-info ember-view fade in panelNoPadding\\\">\\n						        <div class=\\\"panel-heading accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" data-target=\\\"#importMemberList\\\">\\n						             <h4 class=\\\"panel-title\\\">Review Members to import(\");\n      stack1 = helpers._triageMustache.call(depth0, \"potentialMembersToImport.length\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\")</h4>\\n						        </div>\\n						        <div class=\\\"panel-collapse collapse in\\\">\\n						            <div id=\\\"importMemberList\\\" class=\\\"panel-body\\\">\\n										<ul class=\\\"list-group checkboxList\\\">\\n											\");\n      stack1 = helpers.each.call(depth0, \"potentialMembersToImport\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(57, program57, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n										</ul>\\n									</div>\\n								</div>\\n							</div>\\n						\");\n      return buffer;\n      }\n    function program57(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n												<li \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":list-group-item meta.conceptActive::inactiveConcept meta.deleteConcept:deleteConcept\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n			\\n													<label class=\\\"right\\\">SCTID <span>\");\n      stack1 = helpers._triageMustache.call(depth0, \"referencedComponentId\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span></label>\\n													<p class=\\\"description\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"meta.description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>									\\n			\\n													\");\n      stack1 = helpers[\'if\'].call(depth0, \"meta.found\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(58, program58, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n			\\n													\");\n      stack1 = helpers.unless.call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(65, program65, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n												</li>\\n											\");\n      return buffer;\n      }\n    function program58(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n														<label>Import as active\");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"toggle-switch\", {hash:{\n        \'checkedBinding\': (\"active\"),\n        \'value\': (\"id\")\n      },hashTypes:{\'checkedBinding\': \"STRING\",\'value\': \"STRING\"},hashContexts:{\'checkedBinding\': depth0,\'value\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"</label>\\n			\\n														<label>Module:\\n															<span>\\n																\");\n      stack1 = helpers[\'if\'].call(depth0, \"published\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(61, program61, data),fn:self.program(59, program59, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n												 			</span>\\n														</label>\\n															\\n														<label>Concept effective time: <span>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'date-time-format\'] || (depth0 && depth0[\'date-time-format\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"meta.conceptEffectiveTime\", options) : helperMissing.call(depth0, \"date-time-format\", \"meta.conceptEffectiveTime\", options))));\n      data.buffer.push(\"</span></label>\\n														\");\n      stack1 = helpers.unless.call(depth0, \"meta.conceptActive\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(63, program63, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n													\");\n      return buffer;\n      }\n    function program59(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n																	\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-id-to-label\'] || (depth0 && depth0[\'snomed-id-to-label\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"ID\",\"ID\"],data:data},helper ? helper.call(depth0, \"moduleId\", \"outerView.controller.moduleTypes\", options) : helperMissing.call(depth0, \"snomed-id-to-label\", \"moduleId\", \"outerView.controller.moduleTypes\", options))));\n      data.buffer.push(\"\\n																\");\n      return buffer;\n      }\n\n    function program61(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n																	\");\n      data.buffer.push(escapeExpression((helper = helpers[\'snomed-data-dropdown\'] || (depth0 && depth0[\'snomed-data-dropdown\']),options={hash:{\n        \'valueBinding\': (\"moduleId\"),\n        \'dataType\': (\"moduleTypesArray\")\n      },hashTypes:{\'valueBinding\': \"STRING\",\'dataType\': \"STRING\"},hashContexts:{\'valueBinding\': depth0,\'dataType\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"snomed-data-dropdown\", options))));\n      data.buffer.push(\"\\n																 \");\n      return buffer;\n      }\n\n    function program63(depth0,data) {\n      \n      \n      data.buffer.push(\"<label class=\\\"warning\\\">Note: This concept is INACTIVE</label>\");\n      }\n\n    function program65(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"<label class=\\\"right clearRight\\\">Import this concept \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"toggle-switch-inverted\", {hash:{\n        \'checkedBinding\': (\"meta.deleteConcept\"),\n        \'value\': (\"id\")\n      },hashTypes:{\'checkedBinding\': \"STRING\",\'value\': \"STRING\"},hashContexts:{\'checkedBinding\': depth0,\'value\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"</label>\");\n      return buffer;\n      }\n\n    function program67(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n			<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"deleteRefset\", \"id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-default\\\">Delete</button>\\n			\");\n      return buffer;\n      }\n\n      stack1 = helpers[\'if\'].call(depth0, \"error\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      \n    });\n  });//# sourceURL=refset/templates/refsets/refset.js");

;eval("define(\"refset/templates/registration\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div id=\\\"registrationForm\\\" class=\\\"RefsetPanel\\\">\\n	\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"regname\"),\n        \'type\': (\"text\"),\n        \'placeholder\': (\"Your Name\")\n      },hashTypes:{\'value\': \"ID\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n	\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"regphone\"),\n        \'type\': (\"text\"),\n        \'placeholder\': (\"Your phone number\")\n      },hashTypes:{\'value\': \"ID\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n	\\n	\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"reguser\"),\n        \'type\': (\"text\"),\n        \'placeholder\': (\"Already registered with IHTSDO? Enter your login ID here...\")\n      },hashTypes:{\'value\': \"ID\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n	\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"regnationality\"),\n        \'type\': (\"text\"),\n        \'placeholder\': (\"Otherwise, please tell us your nationality\")\n      },hashTypes:{\'value\': \"ID\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n	\\n	\");\n      data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{\n        \'value\': (\"regnotes\"),\n        \'placeholder\': (\"Please tell us why you would like access to Snomed CT\")\n      },hashTypes:{\'value\': \"ID\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n      data.buffer.push(\"\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/registration.js");

;eval("define(\"refset/templates/site-map\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      stack1 = helpers._triageMustache.call(depth0, \"model\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" (templates/side-map.hbs)\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/site-map.js");

;eval("define(\"refset/templates/terms-and-conditions\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      \n    });\n  });//# sourceURL=refset/templates/terms-and-conditions.js");

;eval("define(\"refset/templates/toggle-switch\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<label for=\\\"\");\n      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"view.checkBoxId\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\\">\\n    \");\n      stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    <input id=\\\"\");\n      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"view.checkBoxId\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\\" type=\\\"checkbox\\\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'checked\': (\"view.checked\")\n      },hashTypes:{\'checked\': \"STRING\"},hashContexts:{\'checked\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n    <div class=\\\"switch\\\"></div>\\n</label>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=refset/templates/toggle-switch.js");

;eval("define(\"refset/tests/adapters/login.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/login.js should pass jshint\', function() { \n      ok(true, \'adapters/login.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/adapters/login.jshint.js");

;eval("define(\"refset/tests/adapters/refsets.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/refsets.js should pass jshint\', function() { \n      ok(true, \'adapters/refsets.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/adapters/refsets.jshint.js");

;eval("define(\"refset/tests/adapters/simple-members.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/simple-members.js should pass jshint\', function() { \n      ok(true, \'adapters/simple-members.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/adapters/simple-members.jshint.js");

;eval("define(\"refset/tests/adapters/type-lookups.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/type-lookups.js should pass jshint\', function() { \n      ok(true, \'adapters/type-lookups.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/adapters/type-lookups.jshint.js");

;eval("define(\"refset/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/app.jshint.js");

;eval("define(\"refset/tests/components/snomed-data-dropdown.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/snomed-data-dropdown.js should pass jshint\', function() { \n      ok(true, \'components/snomed-data-dropdown.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/components/snomed-data-dropdown.jshint.js");

;eval("define(\"refset/tests/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/application.js should pass jshint\', function() { \n      ok(true, \'controllers/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/application.jshint.js");

;eval("define(\"refset/tests/controllers/dashboard.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/dashboard.js should pass jshint\', function() { \n      ok(true, \'controllers/dashboard.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/dashboard.jshint.js");

;eval("define(\"refset/tests/controllers/data.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/data.js should pass jshint\', function() { \n      ok(true, \'controllers/data.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/data.jshint.js");

;eval("define(\"refset/tests/controllers/login.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/login.js should pass jshint\', function() { \n      ok(true, \'controllers/login.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/login.jshint.js");

;eval("define(\"refset/tests/controllers/news.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/news.js should pass jshint\', function() { \n      ok(true, \'controllers/news.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/news.jshint.js");

;eval("define(\"refset/tests/controllers/refsets.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/refsets.js should pass jshint\', function() { \n      ok(true, \'controllers/refsets.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/refsets.jshint.js");

;eval("define(\"refset/tests/controllers/refsets/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers/refsets\');\n    test(\'controllers/refsets/index.js should pass jshint\', function() { \n      ok(true, \'controllers/refsets/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/refsets/index.jshint.js");

;eval("define(\"refset/tests/controllers/refsets/new.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers/refsets\');\n    test(\'controllers/refsets/new.js should pass jshint\', function() { \n      ok(true, \'controllers/refsets/new.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/refsets/new.jshint.js");

;eval("define(\"refset/tests/controllers/refsets/refset.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers/refsets\');\n    test(\'controllers/refsets/refset.js should pass jshint\', function() { \n      ok(false, \'controllers/refsets/refset.js should pass jshint.\\ncontrollers/refsets/refset.js: line 72, col 93, Missing semicolon.\\ncontrollers/refsets/refset.js: line 72, col 95, Don\\\'t make functions within a loop.\\n\\n2 errors\'); \n    });\n  });//# sourceURL=refset/tests/controllers/refsets/refset.jshint.js");

;eval("define(\"refset/tests/controllers/refsets/upload.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers/refsets\');\n    test(\'controllers/refsets/upload.js should pass jshint\', function() { \n      ok(false, \'controllers/refsets/upload.js should pass jshint.\\ncontrollers/refsets/upload.js: line 83, col 17, \\\'membersData\\\' is defined but never used.\\n\\n1 error\'); \n    });\n  });//# sourceURL=refset/tests/controllers/refsets/upload.jshint.js");

;eval("define(\"refset/tests/controllers/utilities.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/utilities.js should pass jshint\', function() { \n      ok(true, \'controllers/utilities.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/controllers/utilities.jshint.js");

;eval("define(\"refset/tests/helpers/code-to-language.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - helpers\');\n    test(\'helpers/code-to-language.js should pass jshint\', function() { \n      ok(true, \'helpers/code-to-language.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/helpers/code-to-language.jshint.js");

;eval("define(\"refset/tests/helpers/date-format.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - helpers\');\n    test(\'helpers/date-format.js should pass jshint\', function() { \n      ok(true, \'helpers/date-format.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/helpers/date-format.jshint.js");

;eval("define(\"refset/tests/helpers/date-time-format.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - helpers\');\n    test(\'helpers/date-time-format.js should pass jshint\', function() { \n      ok(true, \'helpers/date-time-format.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/helpers/date-time-format.jshint.js");

;eval("define(\"refset/tests/helpers/resolver\", \n  [\"ember/resolver\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: \'refset\'\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=refset/tests/helpers/resolver.js");

;eval("define(\"refset/tests/helpers/snomed-id-to-label.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - helpers\');\n    test(\'helpers/snomed-id-to-label.js should pass jshint\', function() { \n      ok(true, \'helpers/snomed-id-to-label.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/helpers/snomed-id-to-label.jshint.js");

;eval("define(\"refset/tests/helpers/start-app\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global require */\n\n    var Application = require(\'refset/app\')[\'default\'];\n    var Router = require(\'refset/router\')[\'default\'];\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({\n        // useful Test defaults\n        rootElement: \'#ember-testing\',\n        LOG_ACTIVE_GENERATION: false,\n        LOG_VIEW_LOOKUPS: false\n      }, attrs); // but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=refset/tests/helpers/start-app.js");

;eval("define(\"refset/tests/helpers/yes-no-format.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - helpers\');\n    test(\'helpers/yes-no-format.js should pass jshint\', function() { \n      ok(true, \'helpers/yes-no-format.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/helpers/yes-no-format.jshint.js");

;eval("define(\"refset/tests/models/refset.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/refset.js should pass jshint\', function() { \n      ok(true, \'models/refset.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/models/refset.jshint.js");

;eval("define(\"refset/tests/models/simple-refset-member.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/simple-refset-member.js should pass jshint\', function() { \n      ok(true, \'models/simple-refset-member.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/models/simple-refset-member.jshint.js");

;eval("define(\"refset/tests/models/user.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/user.js should pass jshint\', function() { \n      ok(true, \'models/user.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/models/user.jshint.js");

;eval("define(\"refset/tests/refset/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - refset/tests/helpers\');\n    test(\'refset/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'refset/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/refset/tests/helpers/resolver.jshint.js");

;eval("define(\"refset/tests/refset/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - refset/tests/helpers\');\n    test(\'refset/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'refset/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/refset/tests/helpers/start-app.jshint.js");

;eval("define(\"refset/tests/refset/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - refset/tests\');\n    test(\'refset/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'refset/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/refset/tests/test-helper.jshint.js");

;eval("define(\"refset/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/router.jshint.js");

;eval("define(\"refset/tests/routes/accessibility.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/accessibility.js should pass jshint\', function() { \n      ok(true, \'routes/accessibility.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/accessibility.jshint.js");

;eval("define(\"refset/tests/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/application.js should pass jshint\', function() { \n      ok(true, \'routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/application.jshint.js");

;eval("define(\"refset/tests/routes/cookie-policy.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/cookie-policy.js should pass jshint\', function() { \n      ok(true, \'routes/cookie-policy.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/cookie-policy.jshint.js");

;eval("define(\"refset/tests/routes/dashboard.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/dashboard.js should pass jshint\', function() { \n      ok(true, \'routes/dashboard.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/dashboard.jshint.js");

;eval("define(\"refset/tests/routes/news.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/news.js should pass jshint\', function() { \n      ok(true, \'routes/news.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/news.jshint.js");

;eval("define(\"refset/tests/routes/privacy-statement.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/privacy-statement.js should pass jshint\', function() { \n      ok(true, \'routes/privacy-statement.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/privacy-statement.jshint.js");

;eval("define(\"refset/tests/routes/refsets/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/refsets\');\n    test(\'routes/refsets/index.js should pass jshint\', function() { \n      ok(true, \'routes/refsets/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/refsets/index.jshint.js");

;eval("define(\"refset/tests/routes/refsets/new.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/refsets\');\n    test(\'routes/refsets/new.js should pass jshint\', function() { \n      ok(true, \'routes/refsets/new.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/refsets/new.jshint.js");

;eval("define(\"refset/tests/routes/refsets/refset.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/refsets\');\n    test(\'routes/refsets/refset.js should pass jshint\', function() { \n      ok(true, \'routes/refsets/refset.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/refsets/refset.jshint.js");

;eval("define(\"refset/tests/routes/site-map.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/site-map.js should pass jshint\', function() { \n      ok(true, \'routes/site-map.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/site-map.jshint.js");

;eval("define(\"refset/tests/routes/terms-and-conditions.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/terms-and-conditions.js should pass jshint\', function() { \n      ok(true, \'routes/terms-and-conditions.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/routes/terms-and-conditions.jshint.js");

;eval("define(\"refset/tests/test-helper\", \n  [\"refset/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    if (QUnit.urlParams.nocontainer) {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'hidden\';\n    } else {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'visible\';\n    }\n  });//# sourceURL=refset/tests/test-helper.js");

;eval("define(\"refset/tests/views/toggle-switch-inverted.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - views\');\n    test(\'views/toggle-switch-inverted.js should pass jshint\', function() { \n      ok(true, \'views/toggle-switch-inverted.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/views/toggle-switch-inverted.jshint.js");

;eval("define(\"refset/tests/views/toggle-switch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - views\');\n    test(\'views/toggle-switch.js should pass jshint\', function() { \n      ok(true, \'views/toggle-switch.js should pass jshint.\'); \n    });\n  });//# sourceURL=refset/tests/views/toggle-switch.jshint.js");

;eval("define(\"refset/views/toggle-switch-inverted\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      classNames: [\'toggle-switch\',\'inverted\'],\n      templateName: \'toggle-switch\',\n      \n      init: function() {\n        this._super.apply(this, arguments);\n        return this.on(\'change\', this, this._updateElementValue);\n      },\n      \n      checkBoxId: (function() {\n        return \"checker-\" + (this.get(\'elementId\'));\n      }).property(),\n      \n      _updateElementValue: function() {\n        return this.set(\'checked\', this.$(\'input\').prop(\'checked\'));\n      }\n    });\n  });//# sourceURL=refset/views/toggle-switch-inverted.js");

;eval("define(\"refset/views/toggle-switch\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      classNames: [\'toggle-switch\'],\n      templateName: \'toggle-switch\',\n      \n      init: function() {\n        this._super.apply(this, arguments);\n        return this.on(\'change\', this, this._updateElementValue);\n      },\n      \n      checkBoxId: (function() {\n        return \"checker-\" + (this.get(\'elementId\'));\n      }).property(),\n      \n      _updateElementValue: function() {\n        return this.set(\'checked\', this.$(\'input\').prop(\'checked\'));\n      }\n    });\n  });//# sourceURL=refset/views/toggle-switch.js");
